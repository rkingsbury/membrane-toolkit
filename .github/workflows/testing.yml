name: testing

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Lint with pycodestyle
      run: |
        pip install pycodestyle
        pycodestyle membrane-toolkit
    - name: Lint with mypy
      run: |
        pip install mypy mypy-boto3
        mypy membrane-toolkit
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 --count --show-source --statistics membrane-toolkit
        # exit-zero treats all errors as warnings.
        flake8 --count --exit-zero --max-complexity=20 --statistics membrane-toolkit
  test:
    strategy:
      max-parallel: 6
      matrix:
        os: [ubuntu-latest]
        python-version: [3.7]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v1

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Test with pytest
      env:
        CONTINUOUS_INTEGRATION: True
      run: |
        pip install -e .
        pytest --cov=membrane-toolkit --cov-report=xml
    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml

  docs:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1

    - uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-docs.txt
        pip install -e .
    - name: Build
      run: mkdocs build -d docs