{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"membrane-toolkit \u00b6 What is membrane-toolkit? \u00b6 membrane-toolkit is a suite of Python tools for membrane science. There are currently two primary ways to use it: A Calculator \u00b6 membrane-toolkit's core module packages complex equations from the literature into rigorous, validated Python routines that make it fast and easy to perform state-of-the-science analysis. Each core function has detailed documentation, including formulas, assumptions, and references, and is thoroughly tested for correctness using published data. Compared to manual calculations, using core functions to perform calculations saves time, improves quality, increases reproducibility, and reduces the chances of error. In addition, every core function is available with support for automatic unit conversion, eliminating another potential source of error. Core functions can be used for standalone calculations, as part of a data analysis pipline, or as building blocks for sophisticated transport models. An automatic Data Aggregator \u00b6 membrane-toolkit's pipeline module makes it easy to automatically aggregate and process experimental data. It leverages the maggma framework to collect parse data from Excel spreadsheets into versatible objects called Stores that can interface with numerous database providers, including MongoDB, Pandas dataframes, Amazon storage, and more. A typical data aggregation pipeline consists of the following steps: Choose or customize a Drone, which defines the file format to use when collecting experimental data. Collect data using the template, one file per experiment. Run the Drone to aggregate all the data into a Store View, summarize, and analyze the data in the Store Update as you generate more data. membrane-toolkit's Drones are smart enough to know when files have been updated and to re-parse accordingly. membrane-toolkit is written in Python and supports Python 3.+. Please note that membrane-toolkit is released with a Contributor Code of Conduct . By participating in this project you agree to abide by its terms.","title":"Home"},{"location":"#membrane-toolkit","text":"","title":"membrane-toolkit"},{"location":"#what-is-membrane-toolkit","text":"membrane-toolkit is a suite of Python tools for membrane science. There are currently two primary ways to use it:","title":"What is membrane-toolkit?"},{"location":"#a-calculator","text":"membrane-toolkit's core module packages complex equations from the literature into rigorous, validated Python routines that make it fast and easy to perform state-of-the-science analysis. Each core function has detailed documentation, including formulas, assumptions, and references, and is thoroughly tested for correctness using published data. Compared to manual calculations, using core functions to perform calculations saves time, improves quality, increases reproducibility, and reduces the chances of error. In addition, every core function is available with support for automatic unit conversion, eliminating another potential source of error. Core functions can be used for standalone calculations, as part of a data analysis pipline, or as building blocks for sophisticated transport models.","title":"A Calculator"},{"location":"#an-automatic-data-aggregator","text":"membrane-toolkit's pipeline module makes it easy to automatically aggregate and process experimental data. It leverages the maggma framework to collect parse data from Excel spreadsheets into versatible objects called Stores that can interface with numerous database providers, including MongoDB, Pandas dataframes, Amazon storage, and more. A typical data aggregation pipeline consists of the following steps: Choose or customize a Drone, which defines the file format to use when collecting experimental data. Collect data using the template, one file per experiment. Run the Drone to aggregate all the data into a Store View, summarize, and analyze the data in the Store Update as you generate more data. membrane-toolkit's Drones are smart enough to know when files have been updated and to re-parse accordingly. membrane-toolkit is written in Python and supports Python 3.+. Please note that membrane-toolkit is released with a Contributor Code of Conduct . By participating in this project you agree to abide by its terms.","title":"An automatic Data Aggregator"},{"location":"develop/","text":"Contributing to membrane-toolkit \u00b6 We welcome contributions of all kinds, from reporting bugs or requesting features via a Github issue to contributing documentation and examples to hacking the code and submitting a pull request. Please note that membrane-toolkit is released with a Contributor Code of Conduct . By participating in this project you agree to abide by its terms. Coding Concepts \u00b6 membrane-toolkit is designed to work closely with the family of codes maintained by The Materials Project . In particular, we follow the major architectural decisions of the pymatgen maintainers regarding coding style, test framework, Python compatbility, etc. Key third-party libraries \u00b6 Wherever possible, we import functionality from other codes rather than duplicate functionality. For example, we use pint's Quantity class to handle unit conversion. It will be especially helpful to familiarize yourself with the following methods and packages, in addition to standard scientific Python codes like numpy and scipy: MSONable , loadfn and dumpfn serialization routines from the monty package Drone , Builder , and Store classes from maggma Units-aware computation using pint Quantity objects. Code Organization \u00b6 The code is organized according to the following scheme. The core module contains fully documented, thoroughly tested, standalone functions for key calculations, implemented with floating point math and available in unitized versions with Quantity support in the unitized module. The core module is where the science lives, and standards for code quality and test coverage are enforced most rigorously here. The pipeline module contains all the infrastructure for data aggregation, including Drone, Store, and Builder definitions and templates. test files are placed in /test subdirectories of the module that they test. One test file per module, named \"test_ .py\" Coding Guidelines \u00b6 To ensure the long-term sustainability of the membrane-toolkit codebase, we enforce very strict quality control standards for all contributions. Specifically, all new code must adhere to the following: Tests are required for all new modules and methods. The only way to minimize regression and ensure confidence in membrane-toolkit's calculations is to thoroughly test all code. If the maintainer cannot test your code, the contribution will be rejected. Test should conform to the following schema: * Use [ pytest ]( https : // docs . pytest . org / en / latest / ) * Place tests in files named `test_xxxx.py` in a `tests` subdirectory of the directory where your code resides . * If your test requires external files , place those in `test_files` in the root membrane - toolkit directory . * Test all realistic combinations of input arguments Documentation required for all modules, classes and methods. In particular: * The method docstrings should explain ALL required and optional arguments and return values * Methods and docstrings should use [ TypeHinting ] ( https : // docs . python . org / 3 / library / typing . html ) * Use [ Google-style ] ( https : // google . github . io / styleguide / pyguide . html ) docstrings * Include a ` References :` section with citations where appropriate PyCodeStyle , flake8 , and mypy are used to lint (check) all code, and all code is expected to adhere to this style. To make linting less tedious, we use black to automatically format all files. We highly recommend that you install black and pycodestyle in your IDE to check your code style BEFORE submitting a pull request. Python 3 . We only support Python 3.7+. If in doubt about any of the above, please refer to the source code in membrane_toolkit.core for examples of what is expected.","title":"For Developers"},{"location":"develop/#contributing-to-membrane-toolkit","text":"We welcome contributions of all kinds, from reporting bugs or requesting features via a Github issue to contributing documentation and examples to hacking the code and submitting a pull request. Please note that membrane-toolkit is released with a Contributor Code of Conduct . By participating in this project you agree to abide by its terms.","title":"Contributing to membrane-toolkit"},{"location":"develop/#coding-concepts","text":"membrane-toolkit is designed to work closely with the family of codes maintained by The Materials Project . In particular, we follow the major architectural decisions of the pymatgen maintainers regarding coding style, test framework, Python compatbility, etc.","title":"Coding Concepts"},{"location":"develop/#key-third-party-libraries","text":"Wherever possible, we import functionality from other codes rather than duplicate functionality. For example, we use pint's Quantity class to handle unit conversion. It will be especially helpful to familiarize yourself with the following methods and packages, in addition to standard scientific Python codes like numpy and scipy: MSONable , loadfn and dumpfn serialization routines from the monty package Drone , Builder , and Store classes from maggma Units-aware computation using pint Quantity objects.","title":"Key third-party libraries"},{"location":"develop/#code-organization","text":"The code is organized according to the following scheme. The core module contains fully documented, thoroughly tested, standalone functions for key calculations, implemented with floating point math and available in unitized versions with Quantity support in the unitized module. The core module is where the science lives, and standards for code quality and test coverage are enforced most rigorously here. The pipeline module contains all the infrastructure for data aggregation, including Drone, Store, and Builder definitions and templates. test files are placed in /test subdirectories of the module that they test. One test file per module, named \"test_ .py\"","title":"Code Organization"},{"location":"develop/#coding-guidelines","text":"To ensure the long-term sustainability of the membrane-toolkit codebase, we enforce very strict quality control standards for all contributions. Specifically, all new code must adhere to the following: Tests are required for all new modules and methods. The only way to minimize regression and ensure confidence in membrane-toolkit's calculations is to thoroughly test all code. If the maintainer cannot test your code, the contribution will be rejected. Test should conform to the following schema: * Use [ pytest ]( https : // docs . pytest . org / en / latest / ) * Place tests in files named `test_xxxx.py` in a `tests` subdirectory of the directory where your code resides . * If your test requires external files , place those in `test_files` in the root membrane - toolkit directory . * Test all realistic combinations of input arguments Documentation required for all modules, classes and methods. In particular: * The method docstrings should explain ALL required and optional arguments and return values * Methods and docstrings should use [ TypeHinting ] ( https : // docs . python . org / 3 / library / typing . html ) * Use [ Google-style ] ( https : // google . github . io / styleguide / pyguide . html ) docstrings * Include a ` References :` section with citations where appropriate PyCodeStyle , flake8 , and mypy are used to lint (check) all code, and all code is expected to adhere to this style. To make linting less tedious, we use black to automatically format all files. We highly recommend that you install black and pycodestyle in your IDE to check your code style BEFORE submitting a pull request. Python 3 . We only support Python 3.7+. If in doubt about any of the above, please refer to the source code in membrane_toolkit.core for examples of what is expected.","title":"Coding Guidelines"},{"location":"getting_started/","text":"Try these interactive examples in your web browser: Data aggregation with Drones: Core functions:","title":"Getting Started"},{"location":"ideas_for_later/","text":"Key Classes \u00b6 The primary unit of analysis for transport calcs is a differential membrane slice comprising 5 objects (probably 3 classes): Bulk | Interface | Membrane | Interface | Bulk Each of these \"phase\" classes (bulk, interface, Membrane) will be a base class that can be customized e.g. IXMembrane, ROMembrane, AqueousSolution, OrganicSolution, etc. Bulk could even be a vapor class All of these classes need to have a consistent interface to access 1) composition 2) state variables like pressure, density, etc., and 3) (electro) chemical potential. the customization will specify e.g. how to calculate chemical potential from composition AqueousSolution might use D-H or Pitzer models for activity and density, whereas a Membrane class might use Manning theory. The member methods (e.g. get_activity_coefficient_manning) should be usable by themselves How to handle driving forces? I guess you'll specify these at the boundaries (bulk) and allow the intermediate phases to be solved?","title":"Ideas for later"},{"location":"ideas_for_later/#key-classes","text":"The primary unit of analysis for transport calcs is a differential membrane slice comprising 5 objects (probably 3 classes): Bulk | Interface | Membrane | Interface | Bulk Each of these \"phase\" classes (bulk, interface, Membrane) will be a base class that can be customized e.g. IXMembrane, ROMembrane, AqueousSolution, OrganicSolution, etc. Bulk could even be a vapor class All of these classes need to have a consistent interface to access 1) composition 2) state variables like pressure, density, etc., and 3) (electro) chemical potential. the customization will specify e.g. how to calculate chemical potential from composition AqueousSolution might use D-H or Pitzer models for activity and density, whereas a Membrane class might use Manning theory. The member methods (e.g. get_activity_coefficient_manning) should be usable by themselves How to handle driving forces? I guess you'll specify these at the boundaries (bulk) and allow the intermediate phases to be solved?","title":"Key Classes"},{"location":"install/","text":"Installation \u00b6 Installation from PyPI \u00b6 membrane-toolkit is published on the Python Package Index . The preferred tool for installing packages from PyPi is pip . This tool is provided with all modern versions of Python. Open your terminal and run the following command. pip install --upgrade membrane-toolkit Installation from source \u00b6 You can also install membrane-toolkit directly from a clone of the [Git repository]((https://github.com/rkingsbury/membrane-toolkit). This can be done either by cloning the repo and installing from the local clone, or simply installing directly via git . Local Clone git clone https://github.com/rkingsbury/membrane-toolkit cd membrane-toolkit python setup.py install Direct Git pip install git+https://github.com/rkingsbury/membrane-toolkit","title":"Installation"},{"location":"install/#installation","text":"","title":"Installation"},{"location":"install/#installation-from-pypi","text":"membrane-toolkit is published on the Python Package Index . The preferred tool for installing packages from PyPi is pip . This tool is provided with all modern versions of Python. Open your terminal and run the following command. pip install --upgrade membrane-toolkit","title":"Installation from PyPI"},{"location":"install/#installation-from-source","text":"You can also install membrane-toolkit directly from a clone of the [Git repository]((https://github.com/rkingsbury/membrane-toolkit). This can be done either by cloning the repo and installing from the local clone, or simply installing directly via git . Local Clone git clone https://github.com/rkingsbury/membrane-toolkit cd membrane-toolkit python setup.py install Direct Git pip install git+https://github.com/rkingsbury/membrane-toolkit","title":"Installation from source"},{"location":"core_functions/diffusion/","text":"\u00b6 Calculate the membrane-phase diffusion coefficient according to the Mackie-Meares model. Parameters: Name Type Description Default D_bulk float Bulk diffusion coefficient, [L**2 / t] required phi_w float Water volume fraction (0 < \\phi_w < 1) in the membrane [dimensionless] required Returns: Type Description float float: Diffusion coefficient in the membrane, [L**2 / t] Notes The Mackie-Meares model relates the bulk diffusion coefficient of a species to its diffusion coefficient inside a porous medium through the volume fraction of water (or porosity) of that medium. The equation is D_{mem} = D_{bulk} * ( \\frac{\\phi_w}{2-\\phi_w} )^2 References Mackie, J. S.; Meares, P. The Diffusion of Electrolytes in a Cation-Exchange Resin Membrane. I. Theoretical. Proc. R. Soc. London A 1955, 232 (1191), 498\u2013509. Source code in membrane_toolkit/core/diffusion.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def diffusion_coefficient_mackie_meares ( D_bulk : float , phi_w : float ) -> float : \"\"\" Calculate the membrane-phase diffusion coefficient according to the Mackie-Meares model. Args: D_bulk (float): Bulk diffusion coefficient, [L**2 / t] phi_w (float): Water volume fraction (0 < \\( \\\\phi_w \\) < 1) in the membrane [dimensionless] Returns: float: Diffusion coefficient in the membrane, [L**2 / t] Notes: The Mackie-Meares model relates the bulk diffusion coefficient of a species to its diffusion coefficient inside a porous medium through the volume fraction of water (or porosity) of that medium. The equation is $$ D_{mem} = D_{bulk} * ( \\\\frac{\\\\phi_w}{2-\\\\phi_w} )^2 $$ References: Mackie, J. S.; Meares, P. The Diffusion of Electrolytes in a Cation-Exchange Resin Membrane. I. Theoretical. Proc. R. Soc. London A 1955, 232 (1191), 498\u2013509. \"\"\" if phi_w < 0 or phi_w > 1 : raise ValueError ( \"Invalid phi_w = {} . phi_w must be between 0 and 1\" . format ( phi_w ) ) return D_bulk * ( phi_w / ( 2 - phi_w )) ** 2","title":"Diffusion"},{"location":"core_functions/diffusion/#membrane_toolkit.core.diffusion.diffusion_coefficient_mackie_meares","text":"Calculate the membrane-phase diffusion coefficient according to the Mackie-Meares model. Parameters: Name Type Description Default D_bulk float Bulk diffusion coefficient, [L**2 / t] required phi_w float Water volume fraction (0 < \\phi_w < 1) in the membrane [dimensionless] required Returns: Type Description float float: Diffusion coefficient in the membrane, [L**2 / t] Notes The Mackie-Meares model relates the bulk diffusion coefficient of a species to its diffusion coefficient inside a porous medium through the volume fraction of water (or porosity) of that medium. The equation is D_{mem} = D_{bulk} * ( \\frac{\\phi_w}{2-\\phi_w} )^2 References Mackie, J. S.; Meares, P. The Diffusion of Electrolytes in a Cation-Exchange Resin Membrane. I. Theoretical. Proc. R. Soc. London A 1955, 232 (1191), 498\u2013509. Source code in membrane_toolkit/core/diffusion.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def diffusion_coefficient_mackie_meares ( D_bulk : float , phi_w : float ) -> float : \"\"\" Calculate the membrane-phase diffusion coefficient according to the Mackie-Meares model. Args: D_bulk (float): Bulk diffusion coefficient, [L**2 / t] phi_w (float): Water volume fraction (0 < \\( \\\\phi_w \\) < 1) in the membrane [dimensionless] Returns: float: Diffusion coefficient in the membrane, [L**2 / t] Notes: The Mackie-Meares model relates the bulk diffusion coefficient of a species to its diffusion coefficient inside a porous medium through the volume fraction of water (or porosity) of that medium. The equation is $$ D_{mem} = D_{bulk} * ( \\\\frac{\\\\phi_w}{2-\\\\phi_w} )^2 $$ References: Mackie, J. S.; Meares, P. The Diffusion of Electrolytes in a Cation-Exchange Resin Membrane. I. Theoretical. Proc. R. Soc. London A 1955, 232 (1191), 498\u2013509. \"\"\" if phi_w < 0 or phi_w > 1 : raise ValueError ( \"Invalid phi_w = {} . phi_w must be between 0 and 1\" . format ( phi_w ) ) return D_bulk * ( phi_w / ( 2 - phi_w )) ** 2","title":"membrane_toolkit.core.diffusion.diffusion_coefficient_mackie_meares"},{"location":"core_functions/donnan/","text":"\u00b6 Calculate the Donnan equilibrium at the interface between Phase1 and Phase2. Parameters: Name Type Description Default C_bulk float bulk salt concentration [mol/L] required C_fix float fixed charge concentration, without sign [mol/L] required z_counter int signed charge of the counter-ion. Default = +1 [dimensionless] 1 z_co int signed charge of the co-ion. By definition, this must have the same sign as the co-ion. Default = -1 [dimensionless] -1 nu_counter int stoichiometric coefficient of the counter-ion. Default = 1 [dimensionless] 1 nu_co int stoichiometric coefficient of the co-ion. Default = 1 [dimensionless] 1 z_fix int signed charge of the fixed groups. Default = -1 [dimensionless] -1 gamma float stoichiometrically-weighted ratio of salt activity coefficient in solution to that in the membrane Default = 1 [dimensionless]. 1 Returns: Type Description float The co-ion concentration in the membrane [mol/L]. Note that for salts containing one or more multivalent ions, this is not the same as the mobile salt concentration. Exceptions: Type Description AssertionError If the input stoichiometry is incorrect. Both \\nu must be positive, z_{counter} and z_{fix} must have opposite signs, and \\nu_{counter} * z_{counter} + \\nu_{co} * z_{co} must equal zero. Notes The Donnan equilibrium between a membrane with fixed charged concentration \\bar C_{fix} (mol per L water sorbed) and a salt solution of bulk concentration C_s (mol/L) is given by: \\bar C_{co}^{\\nu_{co}} \\big ( \\frac{z_{co} \\bar C_{co} + z_{fix} \\bar C_{fix}}{z_{ct}} \\big )^{\\nu_{ct}} = - \\Gamma \\nu_{ct}^{\\nu_{ct}} \\nu_{co}^{\\nu_{co}} C_s^{\\nu_{ct} + \\nu_{co}} where subscripts co and ct indicate the co-ion (same charge as the membrane) and counter-ion (opposite charge to the membrane), \\nu (dimensionless) are stoichiometric coefficients, and overbars indicate membrane-phase quantities, in units of moles per liter of water sorbed by the membrane. \\Gamma (dimensionless) is the ratio of activity coefficients in the bulk solution to those in the membrane, given by: \\Gamma = \\frac{\\gamma_{\\pm}^{\\nu_{ct} + \\nu_{co}}}{\\bar \\gamma_{ct}^{\\nu_{ct}} \\bar \\gamma_{co}^{\\nu_{co}}} Traditionally, \\Gamma is either set to 1 (implying that ion activity coefficients are the same in the membrane and in bulk solution), or the ions are assumed to behave ideally in the membrane (activity coefficient in the membrane equal to 1), in which case $\\Gamma$ \\Gamma equals the bulk solution activity coefficient. More recently, Manning theory has been used to compute the membrane-phase activity coefficients, making possible a direct calculation of \\Gamma . References Donnan, F. G. The theory of membrane equilibria. Chem. Rev. 1924, 1 (1), 73\u201390. Kamcev, J.; Galizia, M.; Benedetti, F. M.; Jang, E.-S.; Paul, D. R.; Freeman, B.; Manning, G. S. Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation. Phys. Chem. Chem. Phys. 2016, No. 8, 6021\u20136031. Galizia, M.; Manning, G. S.; Paul, D. R.; Freeman, B. D. Ion partitioning between brines and ion exchange polymers. Polymer (Guildf). 2019, 165 (January), 91\u2013100. Kingsbury, R. S.; Coronell, O. Modelling and validation of concentration dependence of ion exchange membrane permselectivity: significance of convection and Manning\u2019s counter-ion condensation theory. Submitted. Source code in membrane_toolkit/core/donnan.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 def donnan_equilibrium ( C_bulk : float , C_fix : float , z_counter : int = 1 , z_co : int = - 1 , nu_counter : int = 1 , nu_co : int = 1 , z_fix : int = - 1 , gamma : float = 1 , ): \"\"\" Calculate the Donnan equilibrium at the interface between Phase1 and Phase2. Args: C_bulk: bulk salt concentration [mol/L] C_fix: fixed charge concentration, without sign [mol/L] z_counter: signed charge of the counter-ion. Default = +1 [dimensionless] z_co: signed charge of the co-ion. By definition, this must have the same sign as the co-ion. Default = -1 [dimensionless] nu_counter: stoichiometric coefficient of the counter-ion. Default = 1 [dimensionless] nu_co: stoichiometric coefficient of the co-ion. Default = 1 [dimensionless] z_fix: signed charge of the fixed groups. Default = -1 [dimensionless] gamma: stoichiometrically-weighted ratio of salt activity coefficient in solution to that in the membrane Default = 1 [dimensionless]. Returns: float: The co-ion concentration in the membrane [mol/L]. Note that for salts containing one or more multivalent ions, this is not the same as the mobile salt concentration. Raises: AssertionError: If the input stoichiometry is incorrect. Both \\( \\\\nu \\) must be positive, \\( z_{counter} \\) and \\( z_{fix} \\) must have opposite signs, and \\( \\\\nu_{counter} * z_{counter} \\) + \\( \\\\nu_{co} * z_{co} \\) must equal zero. Notes: The Donnan equilibrium between a membrane with fixed charged concentration \\( \\\\bar C_{fix} \\) (mol per L water sorbed) and a salt solution of bulk concentration \\( C_s \\) (mol/L) is given by: $$ \\\\bar C_{co}^{\\\\nu_{co}} \\\\big ( \\\\frac{z_{co} \\\\bar C_{co} + z_{fix} \\\\bar C_{fix}}{z_{ct}} \\ \\\\big )^{\\\\nu_{ct}} = - \\\\Gamma \\\\nu_{ct}^{\\\\nu_{ct}} \\\\nu_{co}^{\\\\nu_{co}} C_s^{\\\\nu_{ct} + \\\\nu_{co}} $$ where subscripts \\( co \\) and \\( ct \\) indicate the co-ion (same charge as the membrane) and counter-ion (opposite charge to the membrane), \\( \\\\nu \\) (dimensionless) are stoichiometric coefficients, and overbars indicate membrane-phase quantities, in units of moles per liter of water sorbed by the membrane. \\( \\\\Gamma \\) (dimensionless) is the ratio of activity coefficients in the bulk solution to those in the membrane, given by: $$ \\\\Gamma = \\\\frac{\\\\gamma_{\\\\pm}^{\\\\nu_{ct} + \\ \\\\nu_{co}}}{\\\\bar \\\\gamma_{ct}^{\\\\nu_{ct}} \\\\bar \\\\gamma_{co}^{\\\\nu_{co}}} $$ Traditionally, \\( \\\\Gamma \\) is either set to 1 (implying that ion activity coefficients are the same in the membrane and in bulk solution), or the ions are assumed to behave ideally in the membrane (activity coefficient in the membrane equal to 1), in which case $\\Gamma$ equals the bulk solution activity coefficient. More recently, Manning theory has been used to compute the membrane-phase activity coefficients, making possible a direct calculation of \\( \\\\Gamma \\). References: Donnan, F. G. The theory of membrane equilibria. Chem. Rev. 1924, 1 (1), 73\u201390. Kamcev, J.; Galizia, M.; Benedetti, F. M.; Jang, E.-S.; Paul, D. R.; Freeman, B.; Manning, G. S. Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation. Phys. Chem. Chem. Phys. 2016, No. 8, 6021\u20136031. Galizia, M.; Manning, G. S.; Paul, D. R.; Freeman, B. D. Ion partitioning between brines and ion exchange polymers. Polymer (Guildf). 2019, 165 (January), 91\u2013100. Kingsbury, R. S.; Coronell, O. Modelling and validation of concentration dependence of ion exchange membrane permselectivity: significance of convection and Manning\u2019s counter-ion condensation theory. Submitted. \"\"\" # validate input arguments assert nu_counter > 0 assert nu_co > 0 assert nu_counter * z_counter == - 1 * nu_co * z_co assert z_fix * z_counter < 0 def _donnan_solver ( C_co ): # private function to interatively solve for co-ion concentration. # return the error squared so we can utilize a scalar minimization routine return C_co ** nu_co * ( ( z_co * C_co + z_fix * C_fix ) / z_counter ) ** nu_counter + gamma * nu_co ** nu_co * nu_counter ** nu_counter * C_bulk ** ( nu_counter + nu_co ) # solve the function above using one of scipy's nonlinear solvers # from scipy.optimize import minimize from scipy.optimize import root_scalar # call a solver to solve for the co-ion concentration # result = minimize(_donnan_solver, 0.01, method=\"TNC\", bounds=[(0, C_bulk * nu_co * 10)]) result = root_scalar ( _donnan_solver , x0 = 0.01 , x1 = C_bulk * nu_co , bracket = ( 0 , C_bulk * nu_co * 2 ) ) # after solving for the co-ion concentration, # calculate the counter-ion concentraiton, Cg # result_counter = -(result_co * z_co + zfix * Cfix) / z_counter if result . converged : return result . root else : raise ValueError ( \" {} failed to find a solution\" . format ( __name__ ))","title":"Donnan Equilibrium"},{"location":"core_functions/donnan/#membrane_toolkit.core.donnan.donnan_equilibrium","text":"Calculate the Donnan equilibrium at the interface between Phase1 and Phase2. Parameters: Name Type Description Default C_bulk float bulk salt concentration [mol/L] required C_fix float fixed charge concentration, without sign [mol/L] required z_counter int signed charge of the counter-ion. Default = +1 [dimensionless] 1 z_co int signed charge of the co-ion. By definition, this must have the same sign as the co-ion. Default = -1 [dimensionless] -1 nu_counter int stoichiometric coefficient of the counter-ion. Default = 1 [dimensionless] 1 nu_co int stoichiometric coefficient of the co-ion. Default = 1 [dimensionless] 1 z_fix int signed charge of the fixed groups. Default = -1 [dimensionless] -1 gamma float stoichiometrically-weighted ratio of salt activity coefficient in solution to that in the membrane Default = 1 [dimensionless]. 1 Returns: Type Description float The co-ion concentration in the membrane [mol/L]. Note that for salts containing one or more multivalent ions, this is not the same as the mobile salt concentration. Exceptions: Type Description AssertionError If the input stoichiometry is incorrect. Both \\nu must be positive, z_{counter} and z_{fix} must have opposite signs, and \\nu_{counter} * z_{counter} + \\nu_{co} * z_{co} must equal zero. Notes The Donnan equilibrium between a membrane with fixed charged concentration \\bar C_{fix} (mol per L water sorbed) and a salt solution of bulk concentration C_s (mol/L) is given by: \\bar C_{co}^{\\nu_{co}} \\big ( \\frac{z_{co} \\bar C_{co} + z_{fix} \\bar C_{fix}}{z_{ct}} \\big )^{\\nu_{ct}} = - \\Gamma \\nu_{ct}^{\\nu_{ct}} \\nu_{co}^{\\nu_{co}} C_s^{\\nu_{ct} + \\nu_{co}} where subscripts co and ct indicate the co-ion (same charge as the membrane) and counter-ion (opposite charge to the membrane), \\nu (dimensionless) are stoichiometric coefficients, and overbars indicate membrane-phase quantities, in units of moles per liter of water sorbed by the membrane. \\Gamma (dimensionless) is the ratio of activity coefficients in the bulk solution to those in the membrane, given by: \\Gamma = \\frac{\\gamma_{\\pm}^{\\nu_{ct} + \\nu_{co}}}{\\bar \\gamma_{ct}^{\\nu_{ct}} \\bar \\gamma_{co}^{\\nu_{co}}} Traditionally, \\Gamma is either set to 1 (implying that ion activity coefficients are the same in the membrane and in bulk solution), or the ions are assumed to behave ideally in the membrane (activity coefficient in the membrane equal to 1), in which case $\\Gamma$ \\Gamma equals the bulk solution activity coefficient. More recently, Manning theory has been used to compute the membrane-phase activity coefficients, making possible a direct calculation of \\Gamma . References Donnan, F. G. The theory of membrane equilibria. Chem. Rev. 1924, 1 (1), 73\u201390. Kamcev, J.; Galizia, M.; Benedetti, F. M.; Jang, E.-S.; Paul, D. R.; Freeman, B.; Manning, G. S. Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation. Phys. Chem. Chem. Phys. 2016, No. 8, 6021\u20136031. Galizia, M.; Manning, G. S.; Paul, D. R.; Freeman, B. D. Ion partitioning between brines and ion exchange polymers. Polymer (Guildf). 2019, 165 (January), 91\u2013100. Kingsbury, R. S.; Coronell, O. Modelling and validation of concentration dependence of ion exchange membrane permselectivity: significance of convection and Manning\u2019s counter-ion condensation theory. Submitted. Source code in membrane_toolkit/core/donnan.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 def donnan_equilibrium ( C_bulk : float , C_fix : float , z_counter : int = 1 , z_co : int = - 1 , nu_counter : int = 1 , nu_co : int = 1 , z_fix : int = - 1 , gamma : float = 1 , ): \"\"\" Calculate the Donnan equilibrium at the interface between Phase1 and Phase2. Args: C_bulk: bulk salt concentration [mol/L] C_fix: fixed charge concentration, without sign [mol/L] z_counter: signed charge of the counter-ion. Default = +1 [dimensionless] z_co: signed charge of the co-ion. By definition, this must have the same sign as the co-ion. Default = -1 [dimensionless] nu_counter: stoichiometric coefficient of the counter-ion. Default = 1 [dimensionless] nu_co: stoichiometric coefficient of the co-ion. Default = 1 [dimensionless] z_fix: signed charge of the fixed groups. Default = -1 [dimensionless] gamma: stoichiometrically-weighted ratio of salt activity coefficient in solution to that in the membrane Default = 1 [dimensionless]. Returns: float: The co-ion concentration in the membrane [mol/L]. Note that for salts containing one or more multivalent ions, this is not the same as the mobile salt concentration. Raises: AssertionError: If the input stoichiometry is incorrect. Both \\( \\\\nu \\) must be positive, \\( z_{counter} \\) and \\( z_{fix} \\) must have opposite signs, and \\( \\\\nu_{counter} * z_{counter} \\) + \\( \\\\nu_{co} * z_{co} \\) must equal zero. Notes: The Donnan equilibrium between a membrane with fixed charged concentration \\( \\\\bar C_{fix} \\) (mol per L water sorbed) and a salt solution of bulk concentration \\( C_s \\) (mol/L) is given by: $$ \\\\bar C_{co}^{\\\\nu_{co}} \\\\big ( \\\\frac{z_{co} \\\\bar C_{co} + z_{fix} \\\\bar C_{fix}}{z_{ct}} \\ \\\\big )^{\\\\nu_{ct}} = - \\\\Gamma \\\\nu_{ct}^{\\\\nu_{ct}} \\\\nu_{co}^{\\\\nu_{co}} C_s^{\\\\nu_{ct} + \\\\nu_{co}} $$ where subscripts \\( co \\) and \\( ct \\) indicate the co-ion (same charge as the membrane) and counter-ion (opposite charge to the membrane), \\( \\\\nu \\) (dimensionless) are stoichiometric coefficients, and overbars indicate membrane-phase quantities, in units of moles per liter of water sorbed by the membrane. \\( \\\\Gamma \\) (dimensionless) is the ratio of activity coefficients in the bulk solution to those in the membrane, given by: $$ \\\\Gamma = \\\\frac{\\\\gamma_{\\\\pm}^{\\\\nu_{ct} + \\ \\\\nu_{co}}}{\\\\bar \\\\gamma_{ct}^{\\\\nu_{ct}} \\\\bar \\\\gamma_{co}^{\\\\nu_{co}}} $$ Traditionally, \\( \\\\Gamma \\) is either set to 1 (implying that ion activity coefficients are the same in the membrane and in bulk solution), or the ions are assumed to behave ideally in the membrane (activity coefficient in the membrane equal to 1), in which case $\\Gamma$ equals the bulk solution activity coefficient. More recently, Manning theory has been used to compute the membrane-phase activity coefficients, making possible a direct calculation of \\( \\\\Gamma \\). References: Donnan, F. G. The theory of membrane equilibria. Chem. Rev. 1924, 1 (1), 73\u201390. Kamcev, J.; Galizia, M.; Benedetti, F. M.; Jang, E.-S.; Paul, D. R.; Freeman, B.; Manning, G. S. Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation. Phys. Chem. Chem. Phys. 2016, No. 8, 6021\u20136031. Galizia, M.; Manning, G. S.; Paul, D. R.; Freeman, B. D. Ion partitioning between brines and ion exchange polymers. Polymer (Guildf). 2019, 165 (January), 91\u2013100. Kingsbury, R. S.; Coronell, O. Modelling and validation of concentration dependence of ion exchange membrane permselectivity: significance of convection and Manning\u2019s counter-ion condensation theory. Submitted. \"\"\" # validate input arguments assert nu_counter > 0 assert nu_co > 0 assert nu_counter * z_counter == - 1 * nu_co * z_co assert z_fix * z_counter < 0 def _donnan_solver ( C_co ): # private function to interatively solve for co-ion concentration. # return the error squared so we can utilize a scalar minimization routine return C_co ** nu_co * ( ( z_co * C_co + z_fix * C_fix ) / z_counter ) ** nu_counter + gamma * nu_co ** nu_co * nu_counter ** nu_counter * C_bulk ** ( nu_counter + nu_co ) # solve the function above using one of scipy's nonlinear solvers # from scipy.optimize import minimize from scipy.optimize import root_scalar # call a solver to solve for the co-ion concentration # result = minimize(_donnan_solver, 0.01, method=\"TNC\", bounds=[(0, C_bulk * nu_co * 10)]) result = root_scalar ( _donnan_solver , x0 = 0.01 , x1 = C_bulk * nu_co , bracket = ( 0 , C_bulk * nu_co * 2 ) ) # after solving for the co-ion concentration, # calculate the counter-ion concentraiton, Cg # result_counter = -(result_co * z_co + zfix * Cfix) / z_counter if result . converged : return result . root else : raise ValueError ( \" {} failed to find a solution\" . format ( __name__ ))","title":"membrane_toolkit.core.donnan.donnan_equilibrium"},{"location":"core_functions/manning/","text":"\u00b6 Return an ion activity coefficient inside a charged polymer, according to Manning theory Parameters: Name Type Description Default xi float Number representing the Manning parameter for the polymer, dimensionless. required C_fix float Number representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. required Cs float Number representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. required type str Specifies whether the counter-ion, co-ion, or the mean ionic activity coefficient is returned. Valid arguments are 'counter', 'co', and 'mean'. Defaults to 'mean' if not specified. 'mean' nu_counter int Stoichiometric coefficient of the counter-ion in the parent salt. Defaults to 1 if not specified. 1 nu_co int int Stoichiometric coefficient of the co-ion in the parent salt. Defaults to -1 if not specified. 1 z_counter int Net charge, including sign, of the counter-ion. Defaults to +1 if not specified. Note that the sign of z_counter must be opposite to the sign of C_fix. 1 z_co int Net charge, including sign, of the co-ion. Defaults to -1 if not specified. Note that the sign of z_co must be the same as the sign of C_fix. -1 Returns: Type Description float the mean or individual ion activity coefficient inside the polymer. Notes When \\xi \\gt \\frac{1}{|z_{ct}|} , ion activity coefficients are given by: \\bar \\gamma_{ct} = \\frac{\\frac{X}{\\xi |z_{ct}|} + \\nu_{ct} |z_{ct}|}{X + \\nu_{ct} |z_{ct}|} exp [-\\frac{\\frac{X}{2}}{X+\\xi |z_{co} z_{ct}| ( \\nu_{co} + \\nu_{ct})}] and \\bar \\gamma_{co} = exp [-\\frac{\\frac{X z_{co}^2}{2 z_{ct}^2}}{X+\\xi |z_{co} z_{ct}| ( \\nu_{co} + \\nu_{ct})}] and if \\xi \\lt \\frac{1}{|z_{ct}|} , by \\bar \\gamma_{ct} = exp [-\\frac{\\xi \\frac{X}{2}}{(X |z_{ct}| + (\\nu_{co} z_{co}^2 + \\nu_{ct} z_{ct}^2)} z_{ct}^2] and \\bar \\gamma_{co} = exp [-\\frac{\\xi \\frac{X}{2}}{(X |z_{ct}| + (\\nu_{co} z_{co}^2 + \\bar \\nu_{ct} z_{ct}^2)} z_{co}^2] where X = \\frac{\\bar C_{co}}{\\bar C_{fix}} \\bar \\gamma are activity coefficients, \\bar C_{fix} is the fixed charge concentration (including sign), \\xi is the Manning parameter, \\bar C_{co} is the co-ion concentration in the membrane, and subscripts co and ct refer to the co-ion and counter-ion, respectively, and overbars indicate membrane-phase quantities. The mean activity coefficient is given by \\bar \\gamma_\\pm = (\\gamma_{ct}^{\\nu_{ct}} \\gamma_{co}^{\\nu_{co}})^{\\frac{1}{\\nu_{ct} + \\nu_{co}}} References J. Kamcev, M. Galizia, F.M. Benedetti, E.-S. Jang, D.R. Paul, B. Freeman, et al., Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation, Phys. Chem. Chem. Phys. (2016). doi:10.1039/C5CP06747B. Kamcev, J.; Paul, D. R.; Freeman, B. D. Ion Activity Coefficients in Ion Exchange Polymers: Applicability of Manning\u2019s Counterion Condensation Theory. Macromolecules 2015, 48 (21), 8011\u20138024. Manning, G. S. Limiting Laws and Counterion Condensation in Polyelectrolyte Solutions I. Colligative Properties. J. Chem. Phys. 1969, 51 (3), 924\u2013933. Source code in membrane_toolkit/core/manning.pydef get_activity_coefficient_manning ( xi : float , C_fix : float , Cs : float , type : str = \"mean\" , nu_counter : int = 1 , nu_co : int = 1 , z_counter : int = 1 , z_co : int = - 1 , ): \"\"\" Return an ion activity coefficient inside a charged polymer, according to Manning theory Args: xi: Number representing the Manning parameter for the polymer, dimensionless. C_fix: Number representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. Cs: Number representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. type: Specifies whether the counter-ion, co-ion, or the mean ionic activity coefficient is returned. Valid arguments are 'counter', 'co', and 'mean'. Defaults to 'mean' if not specified. nu_counter: Stoichiometric coefficient of the counter-ion in the parent salt. Defaults to 1 if not specified. nu_co : int Stoichiometric coefficient of the co-ion in the parent salt. Defaults to -1 if not specified. z_counter: Net charge, including sign, of the counter-ion. Defaults to +1 if not specified. Note that the sign of z_counter must be opposite to the sign of C_fix. z_co: Net charge, including sign, of the co-ion. Defaults to -1 if not specified. Note that the sign of z_co must be the same as the sign of C_fix. Returns: float: the mean or individual ion activity coefficient inside the polymer. Notes: When \\( \\\\xi \\\\gt \\\\frac{1}{|z_{ct}|} \\), ion activity coefficients are given by: $$ \\\\bar \\\\gamma_{ct} = \\\\frac{\\\\frac{X}{\\\\xi |z_{ct}|} + \\\\nu_{ct} |z_{ct}|}{X + \\\\nu_{ct} |z_{ct}|} exp [-\\\\frac{\\\\frac{X}{2}}{X+\\\\xi |z_{co} z_{ct}| ( \\\\nu_{co} + \\\\nu_{ct})}] $$ and $$ \\\\bar \\\\gamma_{co} = exp [-\\\\frac{\\\\frac{X z_{co}^2}{2 z_{ct}^2}}{X+\\\\xi |z_{co} z_{ct}| ( \\\\nu_{co} + \\\\nu_{ct})}] $$ and if \\( \\\\xi \\\\lt \\\\frac{1}{|z_{ct}|} \\), by $$ \\\\bar \\\\gamma_{ct} = exp [-\\\\frac{\\\\xi \\\\frac{X}{2}}{(X |z_{ct}| + (\\\\nu_{co} z_{co}^2 + \\\\nu_{ct} z_{ct}^2)} z_{ct}^2] $$ and $$ \\\\bar \\\\gamma_{co} = exp [-\\\\frac{\\\\xi \\\\frac{X}{2}}{(X |z_{ct}| + (\\\\nu_{co} z_{co}^2 + \\\\bar \\\\nu_{ct} z_{ct}^2)} z_{co}^2] $$ where $$ X = \\\\frac{\\\\bar C_{co}}{\\\\bar C_{fix}} $$ \\(\\\\bar \\\\gamma\\) are activity coefficients, \\( \\\\bar C_{fix} \\) is the fixed charge concentration (including sign), \\( \\\\xi \\) is the Manning parameter, \\( \\\\bar C_{co} \\) is the co-ion concentration in the membrane, and subscripts \\(co\\) and \\(ct\\) refer to the co-ion and counter-ion, respectively, and overbars indicate membrane-phase quantities. The mean activity coefficient is given by $$ \\\\bar \\\\gamma_\\\\pm = (\\\\gamma_{ct}^{\\\\nu_{ct}} \\\\gamma_{co}^{\\\\nu_{co}})^{\\\\frac{1}{\\\\nu_{ct} + \\\\nu_{co}}} $$ References: J. Kamcev, M. Galizia, F.M. Benedetti, E.-S. Jang, D.R. Paul, B. Freeman, et al., Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation, Phys. Chem. Chem. Phys. (2016). doi:10.1039/C5CP06747B. Kamcev, J.; Paul, D. R.; Freeman, B. D. Ion Activity Coefficients in Ion Exchange Polymers: Applicability of Manning\u2019s Counterion Condensation Theory. Macromolecules 2015, 48 (21), 8011\u20138024. Manning, G. S. Limiting Laws and Counterion Condensation in Polyelectrolyte Solutions I. Colligative Properties. J. Chem. Phys. 1969, 51 (3), 924\u2013933. \"\"\" # check to make sure the signs of the input arguments are correct if C_fix < 0 : if not ( z_counter > 0 and z_co < 0 ): raise Exception ( \"Mismatch between signs of fixed charge, counter-ion, and co-ion. Aborting.\" ) elif C_fix >= 0 : if not ( z_counter < 0 and z_co > 0 ): raise Exception ( \"Mismatch between signs of fixed charge, counter-ion, and co-ion. Aborting.\" ) # verify that the stoichiometry of the salt makes sense if z_counter * nu_counter != - 1 * z_co * nu_co : raise Exception ( \"Error in input stoichiometry. z_counter * n_counter != | z_co * nu_co |. Aborting.\" ) # calculate the ratio of fixed charge to mobile salt concentration X = abs ( C_fix / Cs ) # calculate the critical value of the Manning parameter xi_critical = 1 / abs ( z_counter ) # select the appropriate activity coefficient expression based on the value # of the Manning parameter if xi >= xi_critical : gamma_counter = ( ( X / abs ( z_counter ) / xi + abs ( z_counter ) * nu_counter ) / ( X + abs ( z_counter ) * nu_counter ) ) * math . exp ( - ( X / 2 ) / ( X + abs ( z_co * z_counter ) * xi * ( nu_co + nu_counter ))) gamma_co = math . exp ( - ( X / 2 * ( z_co / z_counter ) ** 2 ) / ( X + abs ( z_co * z_counter ) * xi * ( nu_co + nu_counter )) ) elif xi < xi_critical : common_factor = - ( xi * X / 2 ) / ( X * abs ( z_counter ) + ( nu_counter * z_counter ** 2 + nu_co * z_co ** 2 ) ) gamma_counter = math . exp ( common_factor * z_counter ** 2 ) gamma_co = math . exp ( common_factor * z_co ** 2 ) # return the correct value depending on the 'type' argument if type == \"counter\" : return gamma_counter elif type == \"co\" : return gamma_co elif type == \"mean\" : return ( gamma_counter ** nu_counter * gamma_co ** nu_co ) ** ( 1 / ( nu_counter + nu_co ) ) else : raise Exception ( \"Invalid 'type' argument. Enter 'counter'', 'co', or 'mean'\" ) \u00b6 Return a diffusion coefficient inside a charged polymer, according to Manning theory Parameters: Name Type Description Default xi float Number representing the Manning parameter for the polymer, dimensionless. required C_fix float Number representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. required Cs float Number representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. required vol_frac float The volume fraction of water sorbed by the ion exchange membrane. required xi float Number representing the Manning parameter for the polymer, dimensionless. required C_fix float Number representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. required Cs float Number representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. required type str : Specifies whether the counter-ion, co-ion, or the mean diffusion coefficient is returned. Valid arguments are 'counter', 'co'. 'mean' is not currently implemented. Defaults to 'counter' if not specified. 'counter' nu_counter int Stoichiometric coefficient of the counter-ion in the parent salt. Defaults to 1 if not specified. 1 nu_co int int Stoichiometric coefficient of the co-ion in the parent salt. Defaults to -1 if not specified. 1 z_counter int Net charge, including sign, of the counter-ion. Defaults to +1 if not specified. Note that the sign of z_counter must be opposite to the sign of C_fix. 1 z_co int Net charge, including sign, of the co-ion. Defaults to -1 if not specified. Note that the sign of z_co must be the same as the sign of C_fix. -1 Returns: Type Description float The mean or individual ion diffusion coefficient inside the polymer, normalized by the ion diffusion coefficient in bulk solution (D_mem / D_bulk). Notes When \\xi \\gt \\frac{1}{|z_{ct}|} , the counter-ion diffusion coefficient is given by: \\frac{\\bar D_{ct}}{D_{ct}} = \\bigg( \\frac{\\frac{X}{z_{ct}^2 \\nu_{ct} \\xi} + 1} {\\frac{X}{|z_{ct}| \\nu_{ct}} + 1} \\bigg) \\bigg( 1 - \\frac{1}{3} z_{ct}^2 A(\\frac{1}{|z_{ct}|}, \\frac{X}{|z_{ct}| \\xi}\\bigg) \\bigg( \\frac{\\phi_w}{2 - \\phi_w} \\bigg)^2 otherwise, when \\xi \\lt \\frac{1}{|z_{ct}|} : \\frac{\\bar D_{ct}}{D_{ct}} = \\bigg( 1 - \\frac{1}{3} z_{ct}^2 A(\\frac{1}{|z_{ct}|}, \\frac{X}{|z_{ct}| \\xi}\\bigg) \\bigg( \\frac{\\phi_w}{2 - \\phi_w} \\bigg)^2 In either case, co-ion diffusion coefficient is given by \\frac{\\bar D_{co}}{D_{co}} = \\bigg( 1 - \\frac{1}{3} z_{co}^2 A(\\frac{1}{|z_{ct}|}, \\frac{X}{|z_{ct}| \\xi}\\bigg) \\bigg( \\frac{\\phi_w}{2 - \\phi_w} \\bigg)^2 where A = \\sum_{m_1} \\sum_{m_2} \\bigg [ \\pi |z_{ct}|(m_1^2+m_2^2)+|z_{ct}|+ \\frac{(\\nu_{ct} + \\nu_{co})|z_{ct} z_{co}||z_{ct}| \\xi}{X} \\bigg]^{-2} X = \\frac{\\bar C_{co}}{\\bar C_{fix}} \\bar D are diffusion coefficients, \\bar C_{fix} is the fixed charge concentration (including sign), \\xi is the Manning parameter, \\bar C_{co} is the co-ion concentration in the membrane, and subscripts co and ct refer to the co-ion and counter-ion, respectively, and overbars indicate membrane-phase quantities. The mean salt diffusion coefficient is given by \\bar D_s = \\frac{\\bar D_{ct} \\bar D_{co} (z_{ct}^2 \\bar C_{ct} + z_{co}^2 \\bar C_{co} )} {z_{ct}^2 \\bar D_{ct} \\bar C_{ct} + z_{co}^2 \\bar D_{co} \\bar C_{co} } References Kamcev, J.; Paul, D. R.; Manning, G. S.; Freeman, B. D. Predicting Salt Permeability Coefficients in Highly Swollen, Highly Charged Ion Exchange Membranes. ACS Appl. Mater. Interfaces 2017, 9 (4), 4044\u20134056. Kamcev, Jovan, Paul, Donald R., Manning, Gerald S., Freeman, B. D. Ion Diffusion Coefficients in Ion Exchange Membranes: Significance of Counter-Ion Condensation. Macromolecules 2018, 51 (15), 5519\u20135529. Manning, G. S. Limiting Laws and Counterion Condensation in Polyelectrolyte Solutions II. Self\u2010 Diffusion of the Small Ions. J. Chem. Phys. 1969, 51 (3), 934\u2013938. Source code in membrane_toolkit/core/manning.pydef diffusion_coefficient_manning ( xi : float , C_fix : float , Cs : float , vol_frac : float , type : str = \"counter\" , nu_counter : int = 1 , nu_co : int = 1 , z_counter : int = 1 , z_co : int = - 1 , ): \"\"\" Return a diffusion coefficient inside a charged polymer, according to Manning theory Args: xi: Number representing the Manning parameter for the polymer, dimensionless. C_fix: Number representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. Cs: Number representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. vol_frac: The volume fraction of water sorbed by the ion exchange membrane. xi: Number representing the Manning parameter for the polymer, dimensionless. C_fix: Number representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. Cs: Number representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. type:: Specifies whether the counter-ion, co-ion, or the mean diffusion coefficient is returned. Valid arguments are 'counter', 'co'. 'mean' is not currently implemented. Defaults to 'counter' if not specified. nu_counter: Stoichiometric coefficient of the counter-ion in the parent salt. Defaults to 1 if not specified. nu_co : int Stoichiometric coefficient of the co-ion in the parent salt. Defaults to -1 if not specified. z_counter: Net charge, including sign, of the counter-ion. Defaults to +1 if not specified. Note that the sign of z_counter must be opposite to the sign of C_fix. z_co: Net charge, including sign, of the co-ion. Defaults to -1 if not specified. Note that the sign of z_co must be the same as the sign of C_fix. Returns: float: The mean or individual ion diffusion coefficient inside the polymer, normalized by the ion diffusion coefficient in bulk solution (D_mem / D_bulk). Notes: When \\( \\\\xi \\\\gt \\\\frac{1}{|z_{ct}|} \\), the counter-ion diffusion coefficient is given by: $$ \\\\frac{\\\\bar D_{ct}}{D_{ct}} = \\\\bigg( \\\\frac{\\\\frac{X}{z_{ct}^2 \\\\nu_{ct} \\\\xi} + 1} {\\\\frac{X}{|z_{ct}| \\\\nu_{ct}} + 1} \\\\bigg) \\\\bigg( 1 - \\\\frac{1}{3} z_{ct}^2 A(\\\\frac{1}{|z_{ct}|}, \\\\frac{X}{|z_{ct}| \\\\xi}\\\\bigg) \\\\bigg( \\\\frac{\\\\phi_w}{2 - \\\\phi_w} \\\\bigg)^2 $$ otherwise, when \\( \\\\xi \\\\lt \\\\frac{1}{|z_{ct}|} \\): $$ \\\\frac{\\\\bar D_{ct}}{D_{ct}} = \\\\bigg( 1 - \\\\frac{1}{3} z_{ct}^2 A(\\\\frac{1}{|z_{ct}|}, \\\\frac{X}{|z_{ct}| \\\\xi}\\\\bigg) \\\\bigg( \\\\frac{\\\\phi_w}{2 - \\\\phi_w} \\\\bigg)^2 $$ In either case, co-ion diffusion coefficient is given by $$ \\\\frac{\\\\bar D_{co}}{D_{co}} = \\\\bigg( 1 - \\\\frac{1}{3} z_{co}^2 A(\\\\frac{1}{|z_{ct}|}, \\\\frac{X}{|z_{ct}| \\\\xi}\\\\bigg) \\\\bigg( \\\\frac{\\\\phi_w}{2 - \\\\phi_w} \\\\bigg)^2 $$ where $$ A = \\\\sum_{m_1} \\\\sum_{m_2} \\\\bigg [ \\\\pi |z_{ct}|(m_1^2+m_2^2)+|z_{ct}|+ \\\\frac{(\\\\nu_{ct} + \\\\nu_{co})|z_{ct} z_{co}||z_{ct}| \\\\xi}{X} \\\\bigg]^{-2} $$ $$ X = \\\\frac{\\\\bar C_{co}}{\\\\bar C_{fix}} $$ \\(\\\\bar D\\) are diffusion coefficients, \\( \\\\bar C_{fix} \\) is the fixed charge concentration (including sign), \\( \\\\xi \\) is the Manning parameter, \\( \\\\bar C_{co} \\) is the co-ion concentration in the membrane, and subscripts \\(co\\) and \\(ct\\) refer to the co-ion and counter-ion, respectively, and overbars indicate membrane-phase quantities. The mean salt diffusion coefficient is given by $$ \\\\bar D_s = \\\\frac{\\\\bar D_{ct} \\\\bar D_{co} (z_{ct}^2 \\\\bar C_{ct} + z_{co}^2 \\\\bar C_{co} )} {z_{ct}^2 \\\\bar D_{ct} \\\\bar C_{ct} + z_{co}^2 \\\\bar D_{co} \\\\bar C_{co} } $$ References: Kamcev, J.; Paul, D. R.; Manning, G. S.; Freeman, B. D. Predicting Salt Permeability Coefficients in Highly Swollen, Highly Charged Ion Exchange Membranes. ACS Appl. Mater. Interfaces 2017, 9 (4), 4044\u20134056. Kamcev, Jovan, Paul, Donald R., Manning, Gerald S., Freeman, B. D. Ion Diffusion Coefficients in Ion Exchange Membranes: Significance of Counter-Ion Condensation. Macromolecules 2018, 51 (15), 5519\u20135529. Manning, G. S. Limiting Laws and Counterion Condensation in Polyelectrolyte Solutions II. Self\u2010 Diffusion of the Small Ions. J. Chem. Phys. 1969, 51 (3), 934\u2013938. \"\"\" # check to make sure the signs of the input arguments are correct if C_fix < 0 : if not ( z_counter > 0 and z_co < 0 ): raise Exception ( \"Mismatch between signs of fixed charge, counter-ion, and co-ion. Aborting.\" ) elif C_fix >= 0 : if not ( z_counter < 0 and z_co > 0 ): raise Exception ( \"Mismatch between signs of fixed charge, counter-ion, and co-ion. Aborting.\" ) # calculate the ratio of fixed charge to mobile salt concentration X = abs ( C_fix / Cs ) # calculate the critical value of the Manning parameter xi_critical = 1 / abs ( z_counter ) # select the appropriate activity coefficient expression based on the value # of the Manning parameter if xi >= xi_critical : A = _A ( 1 / abs ( z_counter ), X / xi / abs ( z_counter ), nu_counter = nu_counter , nu_co = nu_co , z_counter = z_counter , z_co = z_co , ) D_counter = ( ( ( X / ( z_counter ** 2 * nu_counter * xi ) + 1 ) / ( X / ( abs ( z_counter ) * nu_counter ) + 1 ) ) * ( 1 - 1 / 3 * z_counter ** 2 * A ) * ( vol_frac / ( 2 - vol_frac )) ** 2 ) elif xi < xi_critical : A = _A ( xi , X , nu_counter = nu_counter , nu_co = nu_co , z_counter = z_counter , z_co = z_co ) D_counter = ( 1 - 1 / 3 * z_counter ** 2 * A ) * ( vol_frac / ( 2 - vol_frac )) ** 2 D_co = ( 1 - 1 / 3 * z_co ** 2 * A ) * ( vol_frac / ( 2 - vol_frac )) ** 2 # return the correct value depending on the 'type' argument if type == \"counter\" : return D_counter elif type == \"co\" : return D_co else : raise Exception ( 'Invalid \"type\" argument. Enter \"counter\" or \"co\"' )","title":"Manning Theory"},{"location":"core_functions/manning/#membrane_toolkit.core.manning.get_activity_coefficient_manning","text":"Return an ion activity coefficient inside a charged polymer, according to Manning theory Parameters: Name Type Description Default xi float Number representing the Manning parameter for the polymer, dimensionless. required C_fix float Number representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. required Cs float Number representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. required type str Specifies whether the counter-ion, co-ion, or the mean ionic activity coefficient is returned. Valid arguments are 'counter', 'co', and 'mean'. Defaults to 'mean' if not specified. 'mean' nu_counter int Stoichiometric coefficient of the counter-ion in the parent salt. Defaults to 1 if not specified. 1 nu_co int int Stoichiometric coefficient of the co-ion in the parent salt. Defaults to -1 if not specified. 1 z_counter int Net charge, including sign, of the counter-ion. Defaults to +1 if not specified. Note that the sign of z_counter must be opposite to the sign of C_fix. 1 z_co int Net charge, including sign, of the co-ion. Defaults to -1 if not specified. Note that the sign of z_co must be the same as the sign of C_fix. -1 Returns: Type Description float the mean or individual ion activity coefficient inside the polymer. Notes When \\xi \\gt \\frac{1}{|z_{ct}|} , ion activity coefficients are given by: \\bar \\gamma_{ct} = \\frac{\\frac{X}{\\xi |z_{ct}|} + \\nu_{ct} |z_{ct}|}{X + \\nu_{ct} |z_{ct}|} exp [-\\frac{\\frac{X}{2}}{X+\\xi |z_{co} z_{ct}| ( \\nu_{co} + \\nu_{ct})}] and \\bar \\gamma_{co} = exp [-\\frac{\\frac{X z_{co}^2}{2 z_{ct}^2}}{X+\\xi |z_{co} z_{ct}| ( \\nu_{co} + \\nu_{ct})}] and if \\xi \\lt \\frac{1}{|z_{ct}|} , by \\bar \\gamma_{ct} = exp [-\\frac{\\xi \\frac{X}{2}}{(X |z_{ct}| + (\\nu_{co} z_{co}^2 + \\nu_{ct} z_{ct}^2)} z_{ct}^2] and \\bar \\gamma_{co} = exp [-\\frac{\\xi \\frac{X}{2}}{(X |z_{ct}| + (\\nu_{co} z_{co}^2 + \\bar \\nu_{ct} z_{ct}^2)} z_{co}^2] where X = \\frac{\\bar C_{co}}{\\bar C_{fix}} \\bar \\gamma are activity coefficients, \\bar C_{fix} is the fixed charge concentration (including sign), \\xi is the Manning parameter, \\bar C_{co} is the co-ion concentration in the membrane, and subscripts co and ct refer to the co-ion and counter-ion, respectively, and overbars indicate membrane-phase quantities. The mean activity coefficient is given by \\bar \\gamma_\\pm = (\\gamma_{ct}^{\\nu_{ct}} \\gamma_{co}^{\\nu_{co}})^{\\frac{1}{\\nu_{ct} + \\nu_{co}}} References J. Kamcev, M. Galizia, F.M. Benedetti, E.-S. Jang, D.R. Paul, B. Freeman, et al., Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation, Phys. Chem. Chem. Phys. (2016). doi:10.1039/C5CP06747B. Kamcev, J.; Paul, D. R.; Freeman, B. D. Ion Activity Coefficients in Ion Exchange Polymers: Applicability of Manning\u2019s Counterion Condensation Theory. Macromolecules 2015, 48 (21), 8011\u20138024. Manning, G. S. Limiting Laws and Counterion Condensation in Polyelectrolyte Solutions I. Colligative Properties. J. Chem. Phys. 1969, 51 (3), 924\u2013933. Source code in membrane_toolkit/core/manning.pydef get_activity_coefficient_manning ( xi : float , C_fix : float , Cs : float , type : str = \"mean\" , nu_counter : int = 1 , nu_co : int = 1 , z_counter : int = 1 , z_co : int = - 1 , ): \"\"\" Return an ion activity coefficient inside a charged polymer, according to Manning theory Args: xi: Number representing the Manning parameter for the polymer, dimensionless. C_fix: Number representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. Cs: Number representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. type: Specifies whether the counter-ion, co-ion, or the mean ionic activity coefficient is returned. Valid arguments are 'counter', 'co', and 'mean'. Defaults to 'mean' if not specified. nu_counter: Stoichiometric coefficient of the counter-ion in the parent salt. Defaults to 1 if not specified. nu_co : int Stoichiometric coefficient of the co-ion in the parent salt. Defaults to -1 if not specified. z_counter: Net charge, including sign, of the counter-ion. Defaults to +1 if not specified. Note that the sign of z_counter must be opposite to the sign of C_fix. z_co: Net charge, including sign, of the co-ion. Defaults to -1 if not specified. Note that the sign of z_co must be the same as the sign of C_fix. Returns: float: the mean or individual ion activity coefficient inside the polymer. Notes: When \\( \\\\xi \\\\gt \\\\frac{1}{|z_{ct}|} \\), ion activity coefficients are given by: $$ \\\\bar \\\\gamma_{ct} = \\\\frac{\\\\frac{X}{\\\\xi |z_{ct}|} + \\\\nu_{ct} |z_{ct}|}{X + \\\\nu_{ct} |z_{ct}|} exp [-\\\\frac{\\\\frac{X}{2}}{X+\\\\xi |z_{co} z_{ct}| ( \\\\nu_{co} + \\\\nu_{ct})}] $$ and $$ \\\\bar \\\\gamma_{co} = exp [-\\\\frac{\\\\frac{X z_{co}^2}{2 z_{ct}^2}}{X+\\\\xi |z_{co} z_{ct}| ( \\\\nu_{co} + \\\\nu_{ct})}] $$ and if \\( \\\\xi \\\\lt \\\\frac{1}{|z_{ct}|} \\), by $$ \\\\bar \\\\gamma_{ct} = exp [-\\\\frac{\\\\xi \\\\frac{X}{2}}{(X |z_{ct}| + (\\\\nu_{co} z_{co}^2 + \\\\nu_{ct} z_{ct}^2)} z_{ct}^2] $$ and $$ \\\\bar \\\\gamma_{co} = exp [-\\\\frac{\\\\xi \\\\frac{X}{2}}{(X |z_{ct}| + (\\\\nu_{co} z_{co}^2 + \\\\bar \\\\nu_{ct} z_{ct}^2)} z_{co}^2] $$ where $$ X = \\\\frac{\\\\bar C_{co}}{\\\\bar C_{fix}} $$ \\(\\\\bar \\\\gamma\\) are activity coefficients, \\( \\\\bar C_{fix} \\) is the fixed charge concentration (including sign), \\( \\\\xi \\) is the Manning parameter, \\( \\\\bar C_{co} \\) is the co-ion concentration in the membrane, and subscripts \\(co\\) and \\(ct\\) refer to the co-ion and counter-ion, respectively, and overbars indicate membrane-phase quantities. The mean activity coefficient is given by $$ \\\\bar \\\\gamma_\\\\pm = (\\\\gamma_{ct}^{\\\\nu_{ct}} \\\\gamma_{co}^{\\\\nu_{co}})^{\\\\frac{1}{\\\\nu_{ct} + \\\\nu_{co}}} $$ References: J. Kamcev, M. Galizia, F.M. Benedetti, E.-S. Jang, D.R. Paul, B. Freeman, et al., Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation, Phys. Chem. Chem. Phys. (2016). doi:10.1039/C5CP06747B. Kamcev, J.; Paul, D. R.; Freeman, B. D. Ion Activity Coefficients in Ion Exchange Polymers: Applicability of Manning\u2019s Counterion Condensation Theory. Macromolecules 2015, 48 (21), 8011\u20138024. Manning, G. S. Limiting Laws and Counterion Condensation in Polyelectrolyte Solutions I. Colligative Properties. J. Chem. Phys. 1969, 51 (3), 924\u2013933. \"\"\" # check to make sure the signs of the input arguments are correct if C_fix < 0 : if not ( z_counter > 0 and z_co < 0 ): raise Exception ( \"Mismatch between signs of fixed charge, counter-ion, and co-ion. Aborting.\" ) elif C_fix >= 0 : if not ( z_counter < 0 and z_co > 0 ): raise Exception ( \"Mismatch between signs of fixed charge, counter-ion, and co-ion. Aborting.\" ) # verify that the stoichiometry of the salt makes sense if z_counter * nu_counter != - 1 * z_co * nu_co : raise Exception ( \"Error in input stoichiometry. z_counter * n_counter != | z_co * nu_co |. Aborting.\" ) # calculate the ratio of fixed charge to mobile salt concentration X = abs ( C_fix / Cs ) # calculate the critical value of the Manning parameter xi_critical = 1 / abs ( z_counter ) # select the appropriate activity coefficient expression based on the value # of the Manning parameter if xi >= xi_critical : gamma_counter = ( ( X / abs ( z_counter ) / xi + abs ( z_counter ) * nu_counter ) / ( X + abs ( z_counter ) * nu_counter ) ) * math . exp ( - ( X / 2 ) / ( X + abs ( z_co * z_counter ) * xi * ( nu_co + nu_counter ))) gamma_co = math . exp ( - ( X / 2 * ( z_co / z_counter ) ** 2 ) / ( X + abs ( z_co * z_counter ) * xi * ( nu_co + nu_counter )) ) elif xi < xi_critical : common_factor = - ( xi * X / 2 ) / ( X * abs ( z_counter ) + ( nu_counter * z_counter ** 2 + nu_co * z_co ** 2 ) ) gamma_counter = math . exp ( common_factor * z_counter ** 2 ) gamma_co = math . exp ( common_factor * z_co ** 2 ) # return the correct value depending on the 'type' argument if type == \"counter\" : return gamma_counter elif type == \"co\" : return gamma_co elif type == \"mean\" : return ( gamma_counter ** nu_counter * gamma_co ** nu_co ) ** ( 1 / ( nu_counter + nu_co ) ) else : raise Exception ( \"Invalid 'type' argument. Enter 'counter'', 'co', or 'mean'\" )","title":"membrane_toolkit.core.manning.get_activity_coefficient_manning"},{"location":"core_functions/manning/#membrane_toolkit.core.manning.diffusion_coefficient_manning","text":"Return a diffusion coefficient inside a charged polymer, according to Manning theory Parameters: Name Type Description Default xi float Number representing the Manning parameter for the polymer, dimensionless. required C_fix float Number representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. required Cs float Number representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. required vol_frac float The volume fraction of water sorbed by the ion exchange membrane. required xi float Number representing the Manning parameter for the polymer, dimensionless. required C_fix float Number representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. required Cs float Number representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. required type str : Specifies whether the counter-ion, co-ion, or the mean diffusion coefficient is returned. Valid arguments are 'counter', 'co'. 'mean' is not currently implemented. Defaults to 'counter' if not specified. 'counter' nu_counter int Stoichiometric coefficient of the counter-ion in the parent salt. Defaults to 1 if not specified. 1 nu_co int int Stoichiometric coefficient of the co-ion in the parent salt. Defaults to -1 if not specified. 1 z_counter int Net charge, including sign, of the counter-ion. Defaults to +1 if not specified. Note that the sign of z_counter must be opposite to the sign of C_fix. 1 z_co int Net charge, including sign, of the co-ion. Defaults to -1 if not specified. Note that the sign of z_co must be the same as the sign of C_fix. -1 Returns: Type Description float The mean or individual ion diffusion coefficient inside the polymer, normalized by the ion diffusion coefficient in bulk solution (D_mem / D_bulk). Notes When \\xi \\gt \\frac{1}{|z_{ct}|} , the counter-ion diffusion coefficient is given by: \\frac{\\bar D_{ct}}{D_{ct}} = \\bigg( \\frac{\\frac{X}{z_{ct}^2 \\nu_{ct} \\xi} + 1} {\\frac{X}{|z_{ct}| \\nu_{ct}} + 1} \\bigg) \\bigg( 1 - \\frac{1}{3} z_{ct}^2 A(\\frac{1}{|z_{ct}|}, \\frac{X}{|z_{ct}| \\xi}\\bigg) \\bigg( \\frac{\\phi_w}{2 - \\phi_w} \\bigg)^2 otherwise, when \\xi \\lt \\frac{1}{|z_{ct}|} : \\frac{\\bar D_{ct}}{D_{ct}} = \\bigg( 1 - \\frac{1}{3} z_{ct}^2 A(\\frac{1}{|z_{ct}|}, \\frac{X}{|z_{ct}| \\xi}\\bigg) \\bigg( \\frac{\\phi_w}{2 - \\phi_w} \\bigg)^2 In either case, co-ion diffusion coefficient is given by \\frac{\\bar D_{co}}{D_{co}} = \\bigg( 1 - \\frac{1}{3} z_{co}^2 A(\\frac{1}{|z_{ct}|}, \\frac{X}{|z_{ct}| \\xi}\\bigg) \\bigg( \\frac{\\phi_w}{2 - \\phi_w} \\bigg)^2 where A = \\sum_{m_1} \\sum_{m_2} \\bigg [ \\pi |z_{ct}|(m_1^2+m_2^2)+|z_{ct}|+ \\frac{(\\nu_{ct} + \\nu_{co})|z_{ct} z_{co}||z_{ct}| \\xi}{X} \\bigg]^{-2} X = \\frac{\\bar C_{co}}{\\bar C_{fix}} \\bar D are diffusion coefficients, \\bar C_{fix} is the fixed charge concentration (including sign), \\xi is the Manning parameter, \\bar C_{co} is the co-ion concentration in the membrane, and subscripts co and ct refer to the co-ion and counter-ion, respectively, and overbars indicate membrane-phase quantities. The mean salt diffusion coefficient is given by \\bar D_s = \\frac{\\bar D_{ct} \\bar D_{co} (z_{ct}^2 \\bar C_{ct} + z_{co}^2 \\bar C_{co} )} {z_{ct}^2 \\bar D_{ct} \\bar C_{ct} + z_{co}^2 \\bar D_{co} \\bar C_{co} } References Kamcev, J.; Paul, D. R.; Manning, G. S.; Freeman, B. D. Predicting Salt Permeability Coefficients in Highly Swollen, Highly Charged Ion Exchange Membranes. ACS Appl. Mater. Interfaces 2017, 9 (4), 4044\u20134056. Kamcev, Jovan, Paul, Donald R., Manning, Gerald S., Freeman, B. D. Ion Diffusion Coefficients in Ion Exchange Membranes: Significance of Counter-Ion Condensation. Macromolecules 2018, 51 (15), 5519\u20135529. Manning, G. S. Limiting Laws and Counterion Condensation in Polyelectrolyte Solutions II. Self\u2010 Diffusion of the Small Ions. J. Chem. Phys. 1969, 51 (3), 934\u2013938. Source code in membrane_toolkit/core/manning.pydef diffusion_coefficient_manning ( xi : float , C_fix : float , Cs : float , vol_frac : float , type : str = \"counter\" , nu_counter : int = 1 , nu_co : int = 1 , z_counter : int = 1 , z_co : int = - 1 , ): \"\"\" Return a diffusion coefficient inside a charged polymer, according to Manning theory Args: xi: Number representing the Manning parameter for the polymer, dimensionless. C_fix: Number representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. Cs: Number representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. vol_frac: The volume fraction of water sorbed by the ion exchange membrane. xi: Number representing the Manning parameter for the polymer, dimensionless. C_fix: Number representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. Cs: Number representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. type:: Specifies whether the counter-ion, co-ion, or the mean diffusion coefficient is returned. Valid arguments are 'counter', 'co'. 'mean' is not currently implemented. Defaults to 'counter' if not specified. nu_counter: Stoichiometric coefficient of the counter-ion in the parent salt. Defaults to 1 if not specified. nu_co : int Stoichiometric coefficient of the co-ion in the parent salt. Defaults to -1 if not specified. z_counter: Net charge, including sign, of the counter-ion. Defaults to +1 if not specified. Note that the sign of z_counter must be opposite to the sign of C_fix. z_co: Net charge, including sign, of the co-ion. Defaults to -1 if not specified. Note that the sign of z_co must be the same as the sign of C_fix. Returns: float: The mean or individual ion diffusion coefficient inside the polymer, normalized by the ion diffusion coefficient in bulk solution (D_mem / D_bulk). Notes: When \\( \\\\xi \\\\gt \\\\frac{1}{|z_{ct}|} \\), the counter-ion diffusion coefficient is given by: $$ \\\\frac{\\\\bar D_{ct}}{D_{ct}} = \\\\bigg( \\\\frac{\\\\frac{X}{z_{ct}^2 \\\\nu_{ct} \\\\xi} + 1} {\\\\frac{X}{|z_{ct}| \\\\nu_{ct}} + 1} \\\\bigg) \\\\bigg( 1 - \\\\frac{1}{3} z_{ct}^2 A(\\\\frac{1}{|z_{ct}|}, \\\\frac{X}{|z_{ct}| \\\\xi}\\\\bigg) \\\\bigg( \\\\frac{\\\\phi_w}{2 - \\\\phi_w} \\\\bigg)^2 $$ otherwise, when \\( \\\\xi \\\\lt \\\\frac{1}{|z_{ct}|} \\): $$ \\\\frac{\\\\bar D_{ct}}{D_{ct}} = \\\\bigg( 1 - \\\\frac{1}{3} z_{ct}^2 A(\\\\frac{1}{|z_{ct}|}, \\\\frac{X}{|z_{ct}| \\\\xi}\\\\bigg) \\\\bigg( \\\\frac{\\\\phi_w}{2 - \\\\phi_w} \\\\bigg)^2 $$ In either case, co-ion diffusion coefficient is given by $$ \\\\frac{\\\\bar D_{co}}{D_{co}} = \\\\bigg( 1 - \\\\frac{1}{3} z_{co}^2 A(\\\\frac{1}{|z_{ct}|}, \\\\frac{X}{|z_{ct}| \\\\xi}\\\\bigg) \\\\bigg( \\\\frac{\\\\phi_w}{2 - \\\\phi_w} \\\\bigg)^2 $$ where $$ A = \\\\sum_{m_1} \\\\sum_{m_2} \\\\bigg [ \\\\pi |z_{ct}|(m_1^2+m_2^2)+|z_{ct}|+ \\\\frac{(\\\\nu_{ct} + \\\\nu_{co})|z_{ct} z_{co}||z_{ct}| \\\\xi}{X} \\\\bigg]^{-2} $$ $$ X = \\\\frac{\\\\bar C_{co}}{\\\\bar C_{fix}} $$ \\(\\\\bar D\\) are diffusion coefficients, \\( \\\\bar C_{fix} \\) is the fixed charge concentration (including sign), \\( \\\\xi \\) is the Manning parameter, \\( \\\\bar C_{co} \\) is the co-ion concentration in the membrane, and subscripts \\(co\\) and \\(ct\\) refer to the co-ion and counter-ion, respectively, and overbars indicate membrane-phase quantities. The mean salt diffusion coefficient is given by $$ \\\\bar D_s = \\\\frac{\\\\bar D_{ct} \\\\bar D_{co} (z_{ct}^2 \\\\bar C_{ct} + z_{co}^2 \\\\bar C_{co} )} {z_{ct}^2 \\\\bar D_{ct} \\\\bar C_{ct} + z_{co}^2 \\\\bar D_{co} \\\\bar C_{co} } $$ References: Kamcev, J.; Paul, D. R.; Manning, G. S.; Freeman, B. D. Predicting Salt Permeability Coefficients in Highly Swollen, Highly Charged Ion Exchange Membranes. ACS Appl. Mater. Interfaces 2017, 9 (4), 4044\u20134056. Kamcev, Jovan, Paul, Donald R., Manning, Gerald S., Freeman, B. D. Ion Diffusion Coefficients in Ion Exchange Membranes: Significance of Counter-Ion Condensation. Macromolecules 2018, 51 (15), 5519\u20135529. Manning, G. S. Limiting Laws and Counterion Condensation in Polyelectrolyte Solutions II. Self\u2010 Diffusion of the Small Ions. J. Chem. Phys. 1969, 51 (3), 934\u2013938. \"\"\" # check to make sure the signs of the input arguments are correct if C_fix < 0 : if not ( z_counter > 0 and z_co < 0 ): raise Exception ( \"Mismatch between signs of fixed charge, counter-ion, and co-ion. Aborting.\" ) elif C_fix >= 0 : if not ( z_counter < 0 and z_co > 0 ): raise Exception ( \"Mismatch between signs of fixed charge, counter-ion, and co-ion. Aborting.\" ) # calculate the ratio of fixed charge to mobile salt concentration X = abs ( C_fix / Cs ) # calculate the critical value of the Manning parameter xi_critical = 1 / abs ( z_counter ) # select the appropriate activity coefficient expression based on the value # of the Manning parameter if xi >= xi_critical : A = _A ( 1 / abs ( z_counter ), X / xi / abs ( z_counter ), nu_counter = nu_counter , nu_co = nu_co , z_counter = z_counter , z_co = z_co , ) D_counter = ( ( ( X / ( z_counter ** 2 * nu_counter * xi ) + 1 ) / ( X / ( abs ( z_counter ) * nu_counter ) + 1 ) ) * ( 1 - 1 / 3 * z_counter ** 2 * A ) * ( vol_frac / ( 2 - vol_frac )) ** 2 ) elif xi < xi_critical : A = _A ( xi , X , nu_counter = nu_counter , nu_co = nu_co , z_counter = z_counter , z_co = z_co ) D_counter = ( 1 - 1 / 3 * z_counter ** 2 * A ) * ( vol_frac / ( 2 - vol_frac )) ** 2 D_co = ( 1 - 1 / 3 * z_co ** 2 * A ) * ( vol_frac / ( 2 - vol_frac )) ** 2 # return the correct value depending on the 'type' argument if type == \"counter\" : return D_counter elif type == \"co\" : return D_co else : raise Exception ( 'Invalid \"type\" argument. Enter \"counter\" or \"co\"' )","title":"membrane_toolkit.core.manning.diffusion_coefficient_manning"},{"location":"core_functions/potential/","text":"\u00b6 Calculate the apparent permselectivity of a membrane from the membrane potential. Parameters: Name Type Description Default E_mem float Electrical potential across the membrane [V] required E_ideal float Electrical potential across an ideally-selective membrane, usually calculated via the Nernst equation [V] required t_counter float bulk solution transport number of the counter ion. [dimensionless]. Must be between 0 and 1. 0.5 Returns: Type Description float float: Apparent permselectivity of the membrane, [dimensionless] Notes Apparent permselectivity ranges from 0 to 1, where 0 represents a non-selective membrane and 1 represents a perfectly-selective membrane. Apparent permselectivity is calculated from the membrane potential and differs from the \"true\" permselectivity. The equation is: \\alpha_{app} = \\frac{\\frac{E_{mem}}{E_{ideal}} + 1 - 2 t_{counter}} {2 t_{co}} References Kingsbury, R. S.; Coronell, O. Modelling and validation of concentration dependence of ion exchange membrane permselectivity: significance of convection and Manning\u2019s counter-ion condensation theory. Submitted. Source code in membrane_toolkit/core/potential.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def apparent_permselectivity ( E_mem : float , E_ideal : float , t_counter : float = 0.5 , ) -> float : \"\"\" Calculate the apparent permselectivity of a membrane from the membrane potential. Args: E_mem (float): Electrical potential across the membrane [V] E_ideal (float): Electrical potential across an ideally-selective membrane, usually calculated via the Nernst equation [V] t_counter (float): bulk solution transport number of the counter ion. [dimensionless]. Must be between 0 and 1. Returns: float: Apparent permselectivity of the membrane, [dimensionless] Notes: Apparent permselectivity ranges from 0 to 1, where 0 represents a non-selective membrane and 1 represents a perfectly-selective membrane. Apparent permselectivity is calculated from the membrane potential and differs from the \"true\" permselectivity. The equation is: $$ \\\\alpha_{app} = \\\\frac{\\\\frac{E_{mem}}{E_{ideal}} + 1 - 2 t_{counter}} {2 t_{co}} $$ References: Kingsbury, R. S.; Coronell, O. Modelling and validation of concentration dependence of ion exchange membrane permselectivity: significance of convection and Manning\u2019s counter-ion condensation theory. Submitted. \"\"\" # t_counter must be between 0 and 1 if t_counter < 0 or t_counter > 1 : raise ValueError ( \"Counter-ion transport number must be between 0 and 1. \" \"t_counter= {:.3f} \" . format ( t_counter ) ) return ( E_mem / E_ideal + 1 - 2 * t_counter ) / ( 2 - 2 * t_counter ) \u00b6 Calculate the ideal membrane or interface potential according to the Nernst equation. Parameters: Name Type Description Default a0 float Activity (or concentration) of the electrolyte on the left (x=0) side of the membrane. The units of a0 and aL must match. required aL float Activity (or concentration) of the electrolyte on the left (x=0) side of the membrane. The units of a0 and aL must match. required z_ct int signed charge of the counter-ion species. Default = +1 1 temperature float Temperature of the electrolyte [C]. Default = 25 C 25 Returns: Type Description float The potential [V] of the left (x=0) interface with respect to the right (x=L) interface, according to the Nernst equation. Notes The Nernst equation gives the electrical potential across an ideally-selective membrane separating two electrolyte solutions. E = \\frac{RT}{z_{ct} F}\\log{\\frac{a0}{aL}} where R (8.314 J/mol K) is the ideal gas constant and F (96485 C/mol) is the Faraday constant. References Bard, A. J.; Faulkner, L. R. Electrochemical Methods: Fundamentals and Applications, 2nd ed.; John Wiley & Sons, 2001. Helfferich, F. Ion Exchange; McGraw-Hill: New York, 1962. Winger, A.; Bodamer, G.; Kunin, R. Some electrochemical properties of new synthetic ion exchange memebranes. J. Electrochem. Soc 1953, 100 (4), 178\u2013184. Source code in membrane_toolkit/core/potential.py 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 def nernst_potential ( a0 : float , aL : float , z_ct : int = 1 , temperature : float = 25 ) -> float : \"\"\" Calculate the ideal membrane or interface potential according to the Nernst equation. Args: a0 (float): Activity (or concentration) of the electrolyte on the left (x=0) side of the membrane. The units of a0 and aL must match. aL (float): Activity (or concentration) of the electrolyte on the left (x=0) side of the membrane. The units of a0 and aL must match. z_ct (int): signed charge of the counter-ion species. Default = +1 temperature (float): Temperature of the electrolyte [C]. Default = 25 C Returns: The potential [V] of the left (x=0) interface with respect to the right (x=L) interface, according to the Nernst equation. Notes: The Nernst equation gives the electrical potential across an ideally-selective membrane separating two electrolyte solutions. $$ E = \\\\frac{RT}{z_{ct} F}\\\\log{\\\\frac{a0}{aL}} $$ where R (8.314 J/mol K) is the ideal gas constant and F (96485 C/mol) is the Faraday constant. References: Bard, A. J.; Faulkner, L. R. Electrochemical Methods: Fundamentals and Applications, 2nd ed.; John Wiley & Sons, 2001. Helfferich, F. Ion Exchange; McGraw-Hill: New York, 1962. Winger, A.; Bodamer, G.; Kunin, R. Some electrochemical properties of new synthetic ion exchange memebranes. J. Electrochem. Soc 1953, 100 (4), 178\u2013184. \"\"\" if a0 < 0 : raise ValueError ( \"Received invalid activity argument of a0 = {} . Electrolyte\" \"activity must be positive.\" . format ( a0 ) ) if aL < 0 : raise ValueError ( \"Received invalid activity argument of aL = {} . Electrolyte\" \"activity must be positive.\" . format ( aL ) ) if temperature < - 273.15 : raise ValueError ( \"Received invalid temperature argument of {} . Temperature\" \"is below absolute zero!\" . format ( temperature ) ) return 8.314 * ( temperature + 273.15 ) / z_ct / 96485 * np . log ( a0 / aL )","title":"Electrochemical Properties"},{"location":"core_functions/potential/#membrane_toolkit.core.potential.apparent_permselectivity","text":"Calculate the apparent permselectivity of a membrane from the membrane potential. Parameters: Name Type Description Default E_mem float Electrical potential across the membrane [V] required E_ideal float Electrical potential across an ideally-selective membrane, usually calculated via the Nernst equation [V] required t_counter float bulk solution transport number of the counter ion. [dimensionless]. Must be between 0 and 1. 0.5 Returns: Type Description float float: Apparent permselectivity of the membrane, [dimensionless] Notes Apparent permselectivity ranges from 0 to 1, where 0 represents a non-selective membrane and 1 represents a perfectly-selective membrane. Apparent permselectivity is calculated from the membrane potential and differs from the \"true\" permselectivity. The equation is: \\alpha_{app} = \\frac{\\frac{E_{mem}}{E_{ideal}} + 1 - 2 t_{counter}} {2 t_{co}} References Kingsbury, R. S.; Coronell, O. Modelling and validation of concentration dependence of ion exchange membrane permselectivity: significance of convection and Manning\u2019s counter-ion condensation theory. Submitted. Source code in membrane_toolkit/core/potential.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def apparent_permselectivity ( E_mem : float , E_ideal : float , t_counter : float = 0.5 , ) -> float : \"\"\" Calculate the apparent permselectivity of a membrane from the membrane potential. Args: E_mem (float): Electrical potential across the membrane [V] E_ideal (float): Electrical potential across an ideally-selective membrane, usually calculated via the Nernst equation [V] t_counter (float): bulk solution transport number of the counter ion. [dimensionless]. Must be between 0 and 1. Returns: float: Apparent permselectivity of the membrane, [dimensionless] Notes: Apparent permselectivity ranges from 0 to 1, where 0 represents a non-selective membrane and 1 represents a perfectly-selective membrane. Apparent permselectivity is calculated from the membrane potential and differs from the \"true\" permselectivity. The equation is: $$ \\\\alpha_{app} = \\\\frac{\\\\frac{E_{mem}}{E_{ideal}} + 1 - 2 t_{counter}} {2 t_{co}} $$ References: Kingsbury, R. S.; Coronell, O. Modelling and validation of concentration dependence of ion exchange membrane permselectivity: significance of convection and Manning\u2019s counter-ion condensation theory. Submitted. \"\"\" # t_counter must be between 0 and 1 if t_counter < 0 or t_counter > 1 : raise ValueError ( \"Counter-ion transport number must be between 0 and 1. \" \"t_counter= {:.3f} \" . format ( t_counter ) ) return ( E_mem / E_ideal + 1 - 2 * t_counter ) / ( 2 - 2 * t_counter )","title":"membrane_toolkit.core.potential.apparent_permselectivity"},{"location":"core_functions/potential/#membrane_toolkit.core.potential.nernst_potential","text":"Calculate the ideal membrane or interface potential according to the Nernst equation. Parameters: Name Type Description Default a0 float Activity (or concentration) of the electrolyte on the left (x=0) side of the membrane. The units of a0 and aL must match. required aL float Activity (or concentration) of the electrolyte on the left (x=0) side of the membrane. The units of a0 and aL must match. required z_ct int signed charge of the counter-ion species. Default = +1 1 temperature float Temperature of the electrolyte [C]. Default = 25 C 25 Returns: Type Description float The potential [V] of the left (x=0) interface with respect to the right (x=L) interface, according to the Nernst equation. Notes The Nernst equation gives the electrical potential across an ideally-selective membrane separating two electrolyte solutions. E = \\frac{RT}{z_{ct} F}\\log{\\frac{a0}{aL}} where R (8.314 J/mol K) is the ideal gas constant and F (96485 C/mol) is the Faraday constant. References Bard, A. J.; Faulkner, L. R. Electrochemical Methods: Fundamentals and Applications, 2nd ed.; John Wiley & Sons, 2001. Helfferich, F. Ion Exchange; McGraw-Hill: New York, 1962. Winger, A.; Bodamer, G.; Kunin, R. Some electrochemical properties of new synthetic ion exchange memebranes. J. Electrochem. Soc 1953, 100 (4), 178\u2013184. Source code in membrane_toolkit/core/potential.py 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 def nernst_potential ( a0 : float , aL : float , z_ct : int = 1 , temperature : float = 25 ) -> float : \"\"\" Calculate the ideal membrane or interface potential according to the Nernst equation. Args: a0 (float): Activity (or concentration) of the electrolyte on the left (x=0) side of the membrane. The units of a0 and aL must match. aL (float): Activity (or concentration) of the electrolyte on the left (x=0) side of the membrane. The units of a0 and aL must match. z_ct (int): signed charge of the counter-ion species. Default = +1 temperature (float): Temperature of the electrolyte [C]. Default = 25 C Returns: The potential [V] of the left (x=0) interface with respect to the right (x=L) interface, according to the Nernst equation. Notes: The Nernst equation gives the electrical potential across an ideally-selective membrane separating two electrolyte solutions. $$ E = \\\\frac{RT}{z_{ct} F}\\\\log{\\\\frac{a0}{aL}} $$ where R (8.314 J/mol K) is the ideal gas constant and F (96485 C/mol) is the Faraday constant. References: Bard, A. J.; Faulkner, L. R. Electrochemical Methods: Fundamentals and Applications, 2nd ed.; John Wiley & Sons, 2001. Helfferich, F. Ion Exchange; McGraw-Hill: New York, 1962. Winger, A.; Bodamer, G.; Kunin, R. Some electrochemical properties of new synthetic ion exchange memebranes. J. Electrochem. Soc 1953, 100 (4), 178\u2013184. \"\"\" if a0 < 0 : raise ValueError ( \"Received invalid activity argument of a0 = {} . Electrolyte\" \"activity must be positive.\" . format ( a0 ) ) if aL < 0 : raise ValueError ( \"Received invalid activity argument of aL = {} . Electrolyte\" \"activity must be positive.\" . format ( aL ) ) if temperature < - 273.15 : raise ValueError ( \"Received invalid temperature argument of {} . Temperature\" \"is below absolute zero!\" . format ( temperature ) ) return 8.314 * ( temperature + 273.15 ) / z_ct / 96485 * np . log ( a0 / aL )","title":"membrane_toolkit.core.potential.nernst_potential"}]}