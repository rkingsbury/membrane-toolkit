{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"membrane-toolkit \u00b6 What is membrane-toolkit? \u00b6 membrane-toolkit is a suite of Python tools for membrane science. Maggma is written in Python and supports Python 3.+. Installation from PyPI \u00b6 membrane-toolkit is published on the Python Package Index . The preferred tool for installing packages from PyPi is pip . This tool is provided with all modern versions of Python. Open your terminal and run the following command. pip install --upgrade membrane-toolkit Installation from source \u00b6 You can install membrane-toolkit directly from a clone of the [Git repository]((https://github.com/rkingsbury/membrane-toolkit). This can be done either by cloning the repo and installing from the local clone, or simply installing directly via git . Local Clone git clone https://github.com/rkingsbury/membrane-toolkit cd membrane-toolkit python setup.py install Direct Git pip install git+https://github.com/rkingsbury/membrane-toolkit Please note that this project is released with a Contributor Code of Conduct . By participating in this project you agree to abide by its terms.","title":"Home"},{"location":"#membrane-toolkit","text":"","title":"membrane-toolkit"},{"location":"#what-is-membrane-toolkit","text":"membrane-toolkit is a suite of Python tools for membrane science. Maggma is written in Python and supports Python 3.+.","title":"What is membrane-toolkit?"},{"location":"#installation-from-pypi","text":"membrane-toolkit is published on the Python Package Index . The preferred tool for installing packages from PyPi is pip . This tool is provided with all modern versions of Python. Open your terminal and run the following command. pip install --upgrade membrane-toolkit","title":"Installation from PyPI"},{"location":"#installation-from-source","text":"You can install membrane-toolkit directly from a clone of the [Git repository]((https://github.com/rkingsbury/membrane-toolkit). This can be done either by cloning the repo and installing from the local clone, or simply installing directly via git . Local Clone git clone https://github.com/rkingsbury/membrane-toolkit cd membrane-toolkit python setup.py install Direct Git pip install git+https://github.com/rkingsbury/membrane-toolkit Please note that this project is released with a Contributor Code of Conduct . By participating in this project you agree to abide by its terms.","title":"Installation from source"},{"location":"core_functions/core_functions/","text":"\u00b6 Diffusion coefficient methods All should start with diffusion_coefficient_ diffusion_coefficient_free_volume () \u00b6 Calculate the membrane-phase diffusion coefficient according to the free-volume model. Source code in membrane_toolkit/core/diffusion.py 47 48 49 50 51 52 def diffusion_coefficient_free_volume (): \"\"\" Calculate the membrane-phase diffusion coefficient according to the free-volume model. \"\"\" pass diffusion_coefficient_mackie_meares ( D_bulk , phi_w ) \u00b6 Calculate the membrane-phase diffusion coefficient according to the Mackie-Meares model. Parameters: Name Type Description Default D_bulk float Bulk diffusion coefficient, [L**2 / t] required phi_w float Water volume fraction (0 < \\phi_w < 1) in the membrane [dimensionless] required Returns: Type Description float float: Diffusion coefficient in the membrane, [L**2 / t] Notes The Mackie-Meares model relates the bulk diffusion coefficient of a species to its diffusion coefficient inside a porous medium through the volume fraction of water (or porosity) of that medium. The equation is D_{mem} = D_{bulk} * ( \\frac{\\phi_w}{2-\\phi_w} )^2 References Mackie, J. S.; Meares, P. The Diffusion of Electrolytes in a Cation-Exchange Resin Membrane. I. Theoretical. Proc. R. Soc. London A 1955, 232 (1191), 498\u2013509. Source code in membrane_toolkit/core/diffusion.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def diffusion_coefficient_mackie_meares ( D_bulk : float , phi_w : float ) -> float : \"\"\" Calculate the membrane-phase diffusion coefficient according to the Mackie-Meares model. Args: D_bulk (float): Bulk diffusion coefficient, [L**2 / t] phi_w (float): Water volume fraction (0 < \\( \\\\phi_w \\) < 1) in the membrane [dimensionless] Returns: float: Diffusion coefficient in the membrane, [L**2 / t] Notes: The Mackie-Meares model relates the bulk diffusion coefficient of a species to its diffusion coefficient inside a porous medium through the volume fraction of water (or porosity) of that medium. The equation is $$ D_{mem} = D_{bulk} * ( \\\\frac{\\\\phi_w}{2-\\\\phi_w} )^2 $$ References: Mackie, J. S.; Meares, P. The Diffusion of Electrolytes in a Cation-Exchange Resin Membrane. I. Theoretical. Proc. R. Soc. London A 1955, 232 (1191), 498\u2013509. \"\"\" if phi_w < 0 or phi_w > 1 : raise ValueError ( \"Invalid phi_w = {} . phi_w must be between 0 and 1\" . format ( phi_w ) ) return D_bulk * ( phi_w / ( 2 - phi_w )) ** 2 \u00b6 Donnan exclusion module donnan_equilibrium ( C_bulk , C_fix , z_counter = 1 , z_co =- 1 , nu_counter = 1 , nu_co = 1 , z_fix =- 1 , gamma = 1 ) \u00b6 Calculate the Donnan equilibrium at the interface between Phase1 and Phase2. Parameters: Name Type Description Default C_bulk float bulk salt concentration [mol/L] required C_fix float fixed charge concentration, without sign [mol/L] required z_counter int signed charge of the counter-ion. Default = +1 [dimensionless] 1 z_co int signed charge of the co-ion. By definition, this must have the same sign as the co-ion. Default = -1 [dimensionless] -1 nu_counter int stoichiometric coefficient of the counter-ion. Default = 1 [dimensionless] 1 nu_co int stoichiometric coefficient of the co-ion. Default = 1 [dimensionless] 1 z_fix int signed charge of the fixed groups. Default = -1 [dimensionless] -1 gamma float stoichiometrically-weighted ratio of salt activity coefficient in solution to that in the membrane Default = 1 [dimensionless]. 1 Returns: Type Description float The co-ion concentration in the membrane [mol/L]. Note that for salts containing one or more multivalent ions, this is not the same as the mobile salt concentration. Exceptions: Type Description AssertionError If the input stoichiometry is incorrect. Both \\nu must be positive, z_{counter} and z_{fix} must have opposite signs, and \\nu_{counter} * z_{counter} + \\nu_{co} * z_{co} must equal zero. Notes The Donnan equilibrium between a membrane with fixed charged concentration \\bar C_{fix} (mol per L water sorbed) and a salt solution of bulk concentration C_s (mol/L) is given by: \\bar C_{co}^{\\nu_{co}} \\big ( \\frac{z_{co} \\bar C_{co} + z_{fix} \\bar C_{fix}}{z_{ct}} \\big )^{\\nu_{ct}} = - \\Gamma \\nu_{ct}^{\\nu_{ct}} \\nu_{co}^{\\nu_{co}} C_s^{\\nu_{ct} + \\nu_{co}} where subscripts co and ct indicate the co-ion (same charge as the membrane) and counter-ion (opposite charge to the membrane), \\nu (dimensionless) are stoichiometric coefficients, and overbars indicate membrane-phase quantities, in units of moles per liter of water sorbed by the membrane. \\Gamma (dimensionless) is the ratio of activity coefficients in the bulk solution to those in the membrane, given by: \\Gamma = \\frac{\\gamma_{\\pm}^{\\nu_{ct} + \\nu_{co}}}{\\bar \\gamma_{ct}^{\\nu_{ct}} \\bar \\gamma_{co}^{\\nu_{co}}} Traditionally, \\Gamma is either set to 1 (implying that ion activity coefficients are the same in the membrane and in bulk solution), or the ions are assumed to behave ideally in the membrane (activity coefficient in the membrane equal to 1), in which case $\\Gamma$ \\Gamma equals the bulk solution activity coefficient. More recently, Manning theory has been used to compute the membrane-phase activity coefficients, making possible a direct calculation of \\Gamma . References Donnan, F. G. The theory of membrane equilibria. Chem. Rev. 1924, 1 (1), 73\u201390. Kamcev, J.; Galizia, M.; Benedetti, F. M.; Jang, E.-S.; Paul, D. R.; Freeman, B.; Manning, G. S. Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation. Phys. Chem. Chem. Phys. 2016, No. 8, 6021\u20136031. Galizia, M.; Manning, G. S.; Paul, D. R.; Freeman, B. D. Ion partitioning between brines and ion exchange polymers. Polymer (Guildf). 2019, 165 (January), 91\u2013100. Kingsbury, R. S.; Coronell, O. Modelling and validation of concentration dependence of ion exchange membrane permselectivity: significance of convection and Manning\u2019s counter-ion condensation theory. Submitted. Source code in membrane_toolkit/core/donnan.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 def donnan_equilibrium ( C_bulk : float , C_fix : float , z_counter : int = 1 , z_co : int = - 1 , nu_counter : int = 1 , nu_co : int = 1 , z_fix : int = - 1 , gamma : float = 1 , ): \"\"\" Calculate the Donnan equilibrium at the interface between Phase1 and Phase2. Args: C_bulk: bulk salt concentration [mol/L] C_fix: fixed charge concentration, without sign [mol/L] z_counter: signed charge of the counter-ion. Default = +1 [dimensionless] z_co: signed charge of the co-ion. By definition, this must have the same sign as the co-ion. Default = -1 [dimensionless] nu_counter: stoichiometric coefficient of the counter-ion. Default = 1 [dimensionless] nu_co: stoichiometric coefficient of the co-ion. Default = 1 [dimensionless] z_fix: signed charge of the fixed groups. Default = -1 [dimensionless] gamma: stoichiometrically-weighted ratio of salt activity coefficient in solution to that in the membrane Default = 1 [dimensionless]. Returns: float: The co-ion concentration in the membrane [mol/L]. Note that for salts containing one or more multivalent ions, this is not the same as the mobile salt concentration. Raises: AssertionError: If the input stoichiometry is incorrect. Both \\( \\\\nu \\) must be positive, \\( z_{counter} \\) and \\( z_{fix} \\) must have opposite signs, and \\( \\\\nu_{counter} * z_{counter} \\) + \\( \\\\nu_{co} * z_{co} \\) must equal zero. Notes: The Donnan equilibrium between a membrane with fixed charged concentration \\( \\\\bar C_{fix} \\) (mol per L water sorbed) and a salt solution of bulk concentration \\( C_s \\) (mol/L) is given by: $$ \\\\bar C_{co}^{\\\\nu_{co}} \\\\big ( \\\\frac{z_{co} \\\\bar C_{co} + z_{fix} \\\\bar C_{fix}}{z_{ct}} \\ \\\\big )^{\\\\nu_{ct}} = - \\\\Gamma \\\\nu_{ct}^{\\\\nu_{ct}} \\\\nu_{co}^{\\\\nu_{co}} C_s^{\\\\nu_{ct} + \\\\nu_{co}} $$ where subscripts \\( co \\) and \\( ct \\) indicate the co-ion (same charge as the membrane) and counter-ion (opposite charge to the membrane), \\( \\\\nu \\) (dimensionless) are stoichiometric coefficients, and overbars indicate membrane-phase quantities, in units of moles per liter of water sorbed by the membrane. \\( \\\\Gamma \\) (dimensionless) is the ratio of activity coefficients in the bulk solution to those in the membrane, given by: $$ \\\\Gamma = \\\\frac{\\\\gamma_{\\\\pm}^{\\\\nu_{ct} + \\ \\\\nu_{co}}}{\\\\bar \\\\gamma_{ct}^{\\\\nu_{ct}} \\\\bar \\\\gamma_{co}^{\\\\nu_{co}}} $$ Traditionally, \\( \\\\Gamma \\) is either set to 1 (implying that ion activity coefficients are the same in the membrane and in bulk solution), or the ions are assumed to behave ideally in the membrane (activity coefficient in the membrane equal to 1), in which case $\\Gamma$ equals the bulk solution activity coefficient. More recently, Manning theory has been used to compute the membrane-phase activity coefficients, making possible a direct calculation of \\( \\\\Gamma \\). References: Donnan, F. G. The theory of membrane equilibria. Chem. Rev. 1924, 1 (1), 73\u201390. Kamcev, J.; Galizia, M.; Benedetti, F. M.; Jang, E.-S.; Paul, D. R.; Freeman, B.; Manning, G. S. Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation. Phys. Chem. Chem. Phys. 2016, No. 8, 6021\u20136031. Galizia, M.; Manning, G. S.; Paul, D. R.; Freeman, B. D. Ion partitioning between brines and ion exchange polymers. Polymer (Guildf). 2019, 165 (January), 91\u2013100. Kingsbury, R. S.; Coronell, O. Modelling and validation of concentration dependence of ion exchange membrane permselectivity: significance of convection and Manning\u2019s counter-ion condensation theory. Submitted. \"\"\" # validate input arguments assert nu_counter > 0 assert nu_co > 0 assert nu_counter * z_counter == - 1 * nu_co * z_co assert z_fix * z_counter < 0 def _donnan_solver ( C_co ): # private function to interatively solve for co-ion concentration. # return the error squared so we can utilize a scalar minimization routine return C_co ** nu_co * ( ( z_co * C_co + z_fix * C_fix ) / z_counter ) ** nu_counter + gamma * nu_co ** nu_co * nu_counter ** nu_counter * C_bulk ** ( nu_counter + nu_co ) # solve the function above using one of scipy's nonlinear solvers # from scipy.optimize import minimize from scipy.optimize import root_scalar # call a solver to solve for the co-ion concentration # result = minimize(_donnan_solver, 0.01, method=\"TNC\", bounds=[(0, C_bulk * nu_co * 10)]) result = root_scalar ( _donnan_solver , x0 = 0.01 , x1 = C_bulk * nu_co , bracket = ( 0 , C_bulk * nu_co * 2 ) ) # after solving for the co-ion concentration, # calculate the counter-ion concentraiton, Cg # result_counter = -(result_co * z_co + zfix * Cfix) / z_counter if result . converged : return result . root else : raise ValueError ( \" {} failed to find a solution\" . format ( __name__ )) \u00b6 beta ( xi , fixed_charge , C_counter , Cs , type , nu_counter = 1 , nu_co = 1 , z_counter = 1 , z_co =- 1 ) \u00b6 Return an ion activity coefficient inside a charged polymer, according to Manning theory Parameters \u00b6 xi : float Number representing the Manning parameter for the polymer, dimensionless. fixed_charge : str quantity String representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. C_counter : str quantity String representing the counter-ion concentration inside the polymer. Must be specified in mol/L of water absorbed by the polymer. Cs : str quantity String representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. type : str, optional : Specifies whether the counter-ion, co-ion, or the mean ionic activity coefficient is returned. Valid arguments are 'counter' or 'co'. nu_counter, nu_co : int, optional Stoichiometric coefficients of the counter-ion and co-ion in the parent salt. Defautls to 1 if not specified. z_counter, z_co : int, optional Net charge, including sign, of the counter-ion and co-ion in the parent salt. Defaults to +1 and -1 if not specified. Note that the sign of z_counter must be opposite to the sign of fixed_charge, while the sign of z_co must match that of fixed_Charge. Returns \u00b6 Float The thermodynamic factor. Notes \u00b6 When the Manning parameter is greater than the critical value, the thermodynamic factors are given by [#]_ TODO update \\gamma_+ \\gamma_- = [{{X \\over \\xi} + 1 \\over X +1] exp [{-X \\ over X + 2 \\xi}] and when the Manning Parameter is less than the critical value, by [#]_ TODO update Source code in membrane_toolkit/core/manning.pydef beta ( xi , fixed_charge , C_counter , Cs , type , nu_counter = 1 , nu_co = 1 , z_counter = 1 , z_co =- 1 ): \"\"\" Return an ion activity coefficient inside a charged polymer, according to Manning theory Parameters ---------- xi : float Number representing the Manning parameter for the polymer, dimensionless. fixed_charge : str quantity String representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. C_counter : str quantity String representing the counter-ion concentration inside the polymer. Must be specified in mol/L of water absorbed by the polymer. Cs : str quantity String representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. type : str, optional : Specifies whether the counter-ion, co-ion, or the mean ionic activity coefficient is returned. Valid arguments are 'counter' or 'co'. nu_counter, nu_co : int, optional Stoichiometric coefficients of the counter-ion and co-ion in the parent salt. Defautls to 1 if not specified. z_counter, z_co : int, optional Net charge, including sign, of the counter-ion and co-ion in the parent salt. Defaults to +1 and -1 if not specified. Note that the sign of z_counter must be opposite to the sign of fixed_charge, while the sign of z_co must match that of fixed_Charge. Returns ------- Float The thermodynamic factor. Notes ----- When the Manning parameter is greater than the critical value, the thermodynamic factors are given by [#]_ TODO update $$ \\\\gamma_+ \\\\gamma_- = [{{X \\\\over \\\\xi} + 1 \\\\over X +1] exp [{-X \\\\ over X + 2 \\\\xi}] $$ and when the Manning Parameter is less than the critical value, by [#]_ TODO update \"\"\" # check to make sure the signs of the input arguments are correct if ureg ( fixed_charge ) . magnitude < 0 : if not ( z_counter > 0 and z_co < 0 ): raise Exception ( \"Mismatch between signs of fixed charge, counter-ion, and \\ co-ion. Aborting.\" ) elif ureg ( fixed_charge ) . magnitude >= 0 : if not ( z_counter < 0 and z_co > 0 ): raise Exception ( \"Mismatch between signs of fixed charge, counter-ion, and \\ co-ion. Aborting.\" ) # calculate the critical value of the Manning parameter xi_critical = 1 / abs ( z_counter ) # select the appropriate expression based on the value # of the Manning parameter if xi >= xi_critical : # return the correct value depending on the 'type' argument if type == \"counter\" : beta_counter = ( 1 + ureg ( fixed_charge ) * ( 1 - 1 / abs ( z_counter ) / xi ) / ( ureg ( fixed_charge ) / abs ( z_counter ) / xi + abs ( z_counter ) * nu_counter * ureg ( Cs ) ) + ( nu_counter + nu_co ) * abs ( z_counter ) * xi * ureg ( fixed_charge ) * ureg ( C_counter ) / ( 2 * ( ureg ( fixed_charge ) + abs ( z_counter ) * nu_counter * ( nu_counter + nu_co ) * xi * ureg ( Cs ) ) ** 2 ) ) return beta_counter . magnitude elif type == \"co\" : beta_co = ( 1 + 0.5 * ( z_co / z_counter ) ** 2 * abs ( z_counter ) * nu_counter * ( nu_co + nu_counter ) * xi * ureg ( fixed_charge ) * ureg ( Cs ) / ( ureg ( fixed_charge ) + abs ( z_counter ) * nu_counter * ( nu_co + nu_counter ) * xi * ureg ( Cs ) ) ** 2 ) return beta_co . magnitude else : raise Exception ( 'Invalid \"type\" argument. Enter \"counter\", \"co\", \\ or \"mean\"' ) elif xi < xi_critical : raise Exception ( \"Cannot calculate beta when Manning parameter is below \\ critical value\" ) return None diffusion_coefficient_manning ( xi , fixed_charge , Cs , vol_frac , type = 'counter' , nu_counter = 1 , nu_co = 1 , z_counter = 1 , z_co =- 1 ) \u00b6 Return a diffusion coefficient inside a charged polymer, according to Manning theory Parameters \u00b6 xi : float Number representing the Manning parameter for the polymer, dimensionless. fixed_charge : str quantity String representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. Cs : str quantity String representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. vol_frac : float The volume fraction of water sorbed by the ion exchange membrane. type : str, optional : Specifies whether the counter-ion, co-ion, or the mean ionic activity coefficient is returned. Valid arguments are 'counter', 'co'. Defaults to 'counter' if not specified. nu_counter, nu_co : int, optional Stoichiometric coefficients of the counter-ion and co-ion in the parent salt. Defautls to 1 if not specified. z_counter, z_co : int, optional Net charge, including sign, of the counter-ion and co-ion in the parent salt. Defaults to +1 and -1 if not specified. Note that the sign of z_counter must be opposite to the sign of fixed_charge, while the sign of z_co must match that of fixed_Charge. Returns \u00b6 Float The mean or individual ion diffusion coefficient inside the polymer, normalized by the ion diffusion coefficient in bulk solution (D_mem / D_bulk). Notes \u00b6 Ion diffusion coefficients when the Manning Parameter is greater than the critical value are given by [#]_ TODO update \\frac{D_g}{D_g^s} Where $A$ is equal to \\sum_{m1} \\sum_{m2} [ \\pi |z_g|(m_1^2+m_2^2)+|z_g|+ \\frac{(\\nu_g \\nu_c)|z_g z_c||z_g| \\xi}{X}]^-2 References \u00b6 .. [#] J. Kamcev, M. Galizia, F.M. Benedetti, E.-S. Jang, D.R. Paul, B. Freeman, et al., Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation, Phys. Chem. Chem. Phys. (2016). doi:10.1039/C5CP06747B. .. [#] Manning, G. S. Limiting Laws and Counterion Condensation in Polyelectrolyte Solutions I. Colligative Properties. J. Chem. Phys. 1969, 51 (3), 924\u2013933. Examples \u00b6 an example based on Figure 7 of the Kamcev Reference \u00b6 manning.diffusion_coefficient_manning(2,'-3.21 mol/L','1 mol/L',0.5,type='co') 0.10082061291437808 Source code in membrane_toolkit/core/manning.pydef diffusion_coefficient_manning ( xi , fixed_charge , Cs , vol_frac , type = \"counter\" , nu_counter = 1 , nu_co = 1 , z_counter = 1 , z_co =- 1 , ): \"\"\" Return a diffusion coefficient inside a charged polymer, according to Manning theory Parameters ---------- xi : float Number representing the Manning parameter for the polymer, dimensionless. fixed_charge : str quantity String representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. Cs : str quantity String representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. vol_frac : float The volume fraction of water sorbed by the ion exchange membrane. type : str, optional : Specifies whether the counter-ion, co-ion, or the mean ionic activity coefficient is returned. Valid arguments are 'counter', 'co'. Defaults to 'counter' if not specified. nu_counter, nu_co : int, optional Stoichiometric coefficients of the counter-ion and co-ion in the parent salt. Defautls to 1 if not specified. z_counter, z_co : int, optional Net charge, including sign, of the counter-ion and co-ion in the parent salt. Defaults to +1 and -1 if not specified. Note that the sign of z_counter must be opposite to the sign of fixed_charge, while the sign of z_co must match that of fixed_Charge. Returns ------- Float The mean or individual ion diffusion coefficient inside the polymer, normalized by the ion diffusion coefficient in bulk solution (D_mem / D_bulk). Notes ----- Ion diffusion coefficients when the Manning Parameter is greater than the critical value are given by [#]_ TODO update $$ \\\\frac{D_g}{D_g^s} $$ Where $A$ is equal to $$ \\\\sum_{m1} \\\\sum_{m2} [ \\\\pi |z_g|(m_1^2+m_2^2)+|z_g|+ \\\\frac{(\\\\nu_g \\\\nu_c)|z_g z_c||z_g| \\\\xi}{X}]^-2 $$ References ---------- .. [#] J. Kamcev, M. Galizia, F.M. Benedetti, E.-S. Jang, D.R. Paul, B. Freeman, et al., Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation, Phys. Chem. Chem. Phys. (2016). doi:10.1039/C5CP06747B. .. [#] Manning, G. S. Limiting Laws and Counterion Condensation in Polyelectrolyte Solutions I. Colligative Properties. J. Chem. Phys. 1969, 51 (3), 924\u2013933. Examples -------- # an example based on Figure 7 of the Kamcev Reference >>> manning.diffusion_coefficient_manning(2,'-3.21 mol/L','1 mol/L',0.5,type='co') 0.10082061291437808 \"\"\" # check to make sure the signs of the input arguments are correct if ureg ( fixed_charge ) . magnitude < 0 : if not ( z_counter > 0 and z_co < 0 ): raise Exception ( \"Mismatch between signs of fixed charge, counter-ion, and co-ion. Aborting.\" ) elif ureg ( fixed_charge ) . magnitude >= 0 : if not ( z_counter < 0 and z_co > 0 ): raise Exception ( \"Mismatch between signs of fixed charge, counter-ion, and co-ion. Aborting.\" ) # calculate the ratio of fixed charge to mobile salt concentration X = abs ( ureg ( fixed_charge ) / ureg ( Cs )) . magnitude # calculate the critical value of the Manning parameter xi_critical = 1 / abs ( z_counter ) # select the appropriate activity coefficient expression based on the value # of the Manning parameter if xi >= xi_critical : A = _A ( 1 / abs ( z_counter ), X / xi / abs ( z_counter ), nu_counter = nu_counter , nu_co = nu_co , z_counter = z_counter , z_co = z_co , ) D_counter = ( ( ( X / ( z_counter ** 2 * nu_counter * xi ) + 1 ) / ( X / ( abs ( z_counter ) * nu_counter ) + 1 ) ) * ( 1 - 1 / 3 * z_counter ** 2 * A ) * ( vol_frac / ( 2 - vol_frac )) ** 2 ) elif xi < xi_critical : A = _A ( xi , X , nu_counter = nu_counter , nu_co = nu_co , z_counter = z_counter , z_co = z_co ) D_counter = ( 1 - 1 / 3 * z_counter ** 2 * A ) * ( vol_frac / ( 2 - vol_frac )) ** 2 D_co = ( 1 - 1 / 3 * z_co ** 2 * A ) * ( vol_frac / ( 2 - vol_frac )) ** 2 # return the correct value depending on the 'type' argument if type == \"counter\" : return D_counter elif type == \"co\" : return D_co else : raise Exception ( 'Invalid \"type\" argument. Enter \"counter\" or \"co\"' ) fit_manning_parameter () \u00b6 Fit the manning parameter based on co - ion sorption data . # define an iterative method to solve for the manning parameter , given the co - ion concentraiton def solve_manning_param(charge,coion_conc): def solve(xi,charge,coion_conc): # define C and D solutions cation = 'Na+' anion = 'Cl-' C_conc = '0.5 mol/L' temp = '22 degC' # identify the co-ion if charge < 0 : coion = 'Cl-' elif charge > 0 : coion = 'Na+' !!! else print ( 'Membrane is uncharged!' ) return None # create C and D solutions C_soln = pyEQL . Solution ([[ cation , C_conc ],[ anion , C_conc ]], temperature = temp ) # equilibrate the bulk solution with the membrane C_soln_mem = manning . manning_eql ( C_soln , xi , str ( charge ) + 'mol/L' ) C_co = C_soln_mem . get_amount ( coion , 'mol/L' ) . magnitude return ( C_co - coion_conc ) ** 2 from scipy.optimize import minimize result = minimize ( solve , 1 , args = ( charge , coion_conc ) , method = 'Nelder-Mead' , tol = 1e-4 , options = { 'maxiter' : 100 , 'disp' : True }) return result . x [ 0 ] Source code in membrane_toolkit/core/manning.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def fit_manning_parameter (): \"\"\" Fit the manning parameter based on co-ion sorption data. # define an iterative method to solve for the manning parameter, given the co-ion concentraiton def solve_manning_param(charge,coion_conc): def solve(xi,charge,coion_conc): # define C and D solutions cation = 'Na+' anion = 'Cl-' C_conc = '0.5 mol/L' temp = '22 degC' # identify the co-ion if charge < 0: coion = 'Cl-' elif charge >0: coion = 'Na+' else: print('Membrane is uncharged!') return None # create C and D solutions C_soln = pyEQL.Solution([[cation,C_conc],[anion,C_conc]],temperature=temp) # equilibrate the bulk solution with the membrane C_soln_mem = manning.manning_eql(C_soln,xi,str(charge)+'mol/L') C_co = C_soln_mem.get_amount(coion,'mol/L').magnitude return (C_co - coion_conc)**2 from scipy.optimize import minimize result = minimize(solve,1,args=(charge,coion_conc) ,method='Nelder-Mead',tol=1e-4,options={'maxiter':100,'disp':True}) return result.x[0] \"\"\" pass get_activity_coefficient_manning ( xi , fixed_charge , Cs , type = 'mean' , nu_counter = 1 , nu_co = 1 , z_counter = 1 , z_co =- 1 ) \u00b6 Return an ion activity coefficient inside a charged polymer, according to Manning theory Parameters \u00b6 xi : float Number representing the Manning parameter for the polymer, dimensionless. fixed_charge : str quantity String representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. Cs : str quantity String representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. type : str, optional : Specifies whether the counter-ion, co-ion, or the mean ionic activity coefficient is returned. Valid arguments are 'counter', 'co', and 'mean'. Defaults to 'mean' if not specified. nu_counter, nu_co : int, optional Stoichiometric coefficients of the counter-ion and co-ion in the parent salt. Defautls to 1 if not specified. z_counter, z_co : int, optional Net charge, including sign, of the counter-ion and co-ion in the parent salt. Defaults to +1 and -1 if not specified. Note that the sign of z_counter must be opposite to the sign of fixed_charge, while the sign of z_co must match that of fixed_Charge. Returns \u00b6 Float The mean or individual ion activity coefficient inside the polymer. Notes \u00b6 Ion activity coefficients when the Manning Parameter is greater than the critical value are given by [#]_ TODO update \\gamma_+ \\gamma_- = [{{X \\over \\xi} + 1 \\over X +1] exp [{-X \\ over X + 2 \\xi}] and when the Manning Parameter is less than the critical value, by [#]_ TODO update References \u00b6 .. [#] J. Kamcev, M. Galizia, F.M. Benedetti, E.-S. Jang, D.R. Paul, B. Freeman, et al., Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation, Phys. Chem. Chem. Phys. (2016). doi:10.1039/C5CP06747B. .. [#] Manning, G. S. Limiting Laws and Counterion Condensation in Polyelectrolyte Solutions I. Colligative Properties. J. Chem. Phys. 1969, 51 (3), 924\u2013933. Examples \u00b6 TODO See Also \u00b6 TODO Source code in membrane_toolkit/core/manning.pydef get_activity_coefficient_manning ( xi , fixed_charge , Cs , type = \"mean\" , nu_counter = 1 , nu_co = 1 , z_counter = 1 , z_co =- 1 ): \"\"\" Return an ion activity coefficient inside a charged polymer, according to Manning theory Parameters ---------- xi : float Number representing the Manning parameter for the polymer, dimensionless. fixed_charge : str quantity String representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. Cs : str quantity String representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. type : str, optional : Specifies whether the counter-ion, co-ion, or the mean ionic activity coefficient is returned. Valid arguments are 'counter', 'co', and 'mean'. Defaults to 'mean' if not specified. nu_counter, nu_co : int, optional Stoichiometric coefficients of the counter-ion and co-ion in the parent salt. Defautls to 1 if not specified. z_counter, z_co : int, optional Net charge, including sign, of the counter-ion and co-ion in the parent salt. Defaults to +1 and -1 if not specified. Note that the sign of z_counter must be opposite to the sign of fixed_charge, while the sign of z_co must match that of fixed_Charge. Returns ------- Float The mean or individual ion activity coefficient inside the polymer. Notes ----- Ion activity coefficients when the Manning Parameter is greater than the critical value are given by [#]_ TODO update $$ \\\\gamma_+ \\\\gamma_- = [{{X \\\\over \\\\xi} + 1 \\\\over X +1] exp [{-X \\\\ over X + 2 \\\\xi}] $$ and when the Manning Parameter is less than the critical value, by [#]_ TODO update References ---------- .. [#] J. Kamcev, M. Galizia, F.M. Benedetti, E.-S. Jang, D.R. Paul, B. Freeman, et al., Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation, Phys. Chem. Chem. Phys. (2016). doi:10.1039/C5CP06747B. .. [#] Manning, G. S. Limiting Laws and Counterion Condensation in Polyelectrolyte Solutions I. Colligative Properties. J. Chem. Phys. 1969, 51 (3), 924\u2013933. Examples -------- TODO See Also -------- TODO \"\"\" # check to make sure the signs of the input arguments are correct if ureg ( fixed_charge ) . magnitude < 0 : if not ( z_counter > 0 and z_co < 0 ): raise Exception ( \"Mismatch between signs of fixed charge, counter-ion, and co-ion. Aborting.\" ) elif ureg ( fixed_charge ) . magnitude >= 0 : if not ( z_counter < 0 and z_co > 0 ): raise Exception ( \"Mismatch between signs of fixed charge, counter-ion, and co-ion. Aborting.\" ) # verify that the stoichiometry of the salt makes sense if z_counter * nu_counter != - 1 * z_co * nu_co : raise Exception ( \"Error in input stoichiometry. z_counter * n_counter != | z_co * nu_co |. Aborting.\" ) # calculate the ratio of fixed charge to mobile salt concentration X = abs ( ureg ( fixed_charge ) / ureg ( Cs )) . magnitude # calculate the critical value of the Manning parameter xi_critical = 1 / abs ( z_counter ) # select the appropriate activity coefficient expression based on the value # of the Manning parameter if xi >= xi_critical : gamma_counter = ( ( X / abs ( z_counter ) / xi + abs ( z_counter ) * nu_counter ) / ( X + abs ( z_counter ) * nu_counter ) ) * math . exp ( - ( X / 2 ) / ( X + abs ( z_co * z_counter ) * xi * ( nu_co + nu_counter ))) gamma_co = math . exp ( - ( X / 2 * ( z_co / z_counter ) ** 2 ) / ( X + abs ( z_co * z_counter ) * xi * ( nu_co + nu_counter )) ) elif xi < xi_critical : common_factor = - ( xi * X / 2 ) / ( X * abs ( z_counter ) + ( nu_counter * z_counter ** 2 + nu_co * z_co ** 2 ) ) gamma_counter = math . exp ( common_factor * z_counter ** 2 ) gamma_co = math . exp ( common_factor * z_co ** 2 ) # return the correct value depending on the 'type' argument if type == \"counter\" : return gamma_counter elif type == \"co\" : return gamma_co elif type == \"mean\" : return ( gamma_counter ** nu_counter * gamma_co ** nu_co ) ** ( 1 / ( nu_counter + nu_co ) ) else : raise Exception ( \"Invalid 'type' argument. Enter 'counter'', 'co', or 'mean'\" ) manning_eql ( solution , xi , fixed_charge ) \u00b6 Return a solution object in equilibrium with fixed_charge, according to Manning's Counter-ion Condensation theory Parameters \u00b6 xi : float Number representing the Manning parameter, dimensionless. fixed_charge : str quantity String representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the membrane Solution : Solution object The external solution to be brought into equilibrium with the fixed charges Returns \u00b6 Solution A solution that has established Donnan-Manning equilibrium with the external (input) Solution Notes \u00b6 The equation solved when the Manning Parameter is greater than 1 is:[#]_ TODO insert equations References \u00b6 .. [#] J. Kamcev, M. Galizia, F.M. Benedetti, E.-S. Jang, D.R. Paul, B. Freeman, et al., Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation, Phys. Chem. Chem. Phys. (2016). doi:10.1039/C5CP06747B. .. [#] G.S. Manning, Limiting Laws and Counterion Condensation in Polyelectrolyte Solutions I. Colligative Properties, J. Chem. Phys. 51 (1969) 924\u2013933. doi:10.1063/1.1672157. Examples \u00b6 TODO See Also \u00b6 get_salt() Source code in membrane_toolkit/core/manning.pydef manning_eql ( solution , xi , fixed_charge ): \"\"\" Return a solution object in equilibrium with fixed_charge, according to Manning's Counter-ion Condensation theory Parameters ---------- xi : float Number representing the Manning parameter, dimensionless. fixed_charge : str quantity String representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the membrane Solution : Solution object The external solution to be brought into equilibrium with the fixed charges Returns ------- Solution A solution that has established Donnan-Manning equilibrium with the external (input) Solution Notes ----- The equation solved when the Manning Parameter is greater than 1 is:[#]_ TODO insert equations References ---------- .. [#] J. Kamcev, M. Galizia, F.M. Benedetti, E.-S. Jang, D.R. Paul, B. Freeman, et al., Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation, Phys. Chem. Chem. Phys. (2016). doi:10.1039/C5CP06747B. .. [#] G.S. Manning, Limiting Laws and Counterion Condensation in Polyelectrolyte Solutions I. Colligative Properties, J. Chem. Phys. 51 (1969) 924\u2013933. doi:10.1063/1.1672157. Examples -------- TODO See Also -------- get_salt() \"\"\" # identify the salt salt = solution . get_salt () # convert fixed_charge in to a quantity fixed_charge = ureg ( fixed_charge ) # initialize the equilibrated solution - start with a direct copy of the # input / external solution manning_soln = solution . copy () # identify variables from the external solution if fixed_charge . magnitude >= 0 : # AEM, counter-ion is the anion formula_counter = salt . anion formula_co = salt . cation conc_counter = solution . get_amount ( salt . anion , str ( fixed_charge . units )) conc_co = solution . get_amount ( salt . cation , str ( fixed_charge . units )) z_counter = salt . z_anion z_co = salt . z_cation nu_counter = salt . nu_anion nu_co = salt . nu_cation elif fixed_charge . magnitude <= 0 : # CEM, counter-ion is the cation formula_counter = salt . cation formula_co = salt . anion conc_counter = solution . get_amount ( salt . cation , str ( fixed_charge . units )) conc_co = solution . get_amount ( salt . anion , str ( fixed_charge . units )) z_counter = salt . z_cation z_co = salt . z_anion nu_counter = salt . nu_cation nu_co = salt . nu_anion else : warnings . warn ( \"Fixed charge concentration is zero, Donnan equilibrium cannot be \\ established. Returning a copy of the bulk solution.\" ) return manning_soln # do nothing if either of the ion concentrations is zero if conc_counter . magnitude == 0 or conc_co . magnitude == 0 : return manning_soln # fixed charge concentration Cfix = abs ( fixed_charge . magnitude ) zfix = fixed_charge . magnitude / Cfix # calculate the RHS of the equation (the bulk salt activity) RHS = ( solution . get_activity ( formula_counter ) ** nu_counter * solution . get_activity ( formula_co ) ** nu_co ) # define a function representing the donnan-manning equilibrium as a # function of the two unknown actvities to feed to the nonlinear solver def manning_solve ( Cc ): \"\"\"Where Cc is the magnitude of co-ion concentration \"\"\" # solve for the counter-ion concentration by enforcing # electroneutrality using only floats / ints here instead of # quantities helps performance # get the mean activity coefficient of the ions in the polymer gamma_mean = get_activity_coefficient_manning ( xi , str ( fixed_charge ), str ( Cc ) + \"mol/L\" , \"mean\" , nu_counter , nu_co , z_counter , z_co , ) # calculate the LHS of the concentration expression LHS = ( Cc ** nu_co * (( - z_co * Cc - zfix * Cfix ) / z_counter ) ** nu_counter * gamma_mean ** ( nu_counter + nu_co ) ) return LHS - RHS # solve the function above using one of scipy's nonlinear solvers from scipy.optimize import brentq # call a nonlinear solver to solve for the co-ion concentration # the initial guess is to set the co-ion concentration in the membrane # equal to that in the solution result_co = brentq ( manning_solve , 1e-10 , 2 * conc_co . magnitude , xtol = 0.000001 ) # after solving for the co-ion concentration, # calculate the counter-ion concentraiton, Cg result_counter = - ( result_co * z_co + zfix * Cfix ) / z_counter # match the units of the solved concentration to the units given for # fixed_charge units = str ( fixed_charge . units ) # set the cation and anion concentrations in the membrane phase equal # to the result manning_soln . set_amount ( formula_counter , str ( result_counter ) + units ) manning_soln . set_amount ( formula_co , str ( result_co ) + units ) # return the equilibrated solution return manning_soln \u00b6 Membrane potential related methods apparent_permselectivity ( E_mem , E_ideal , t_counter = 0.5 ) \u00b6 Calculate the apparent permselectivity of a membrane from the membrane potential. Parameters: Name Type Description Default E_mem float Electrical potential across the membrane [V] required E_ideal float Electrical potential across an ideally-selective membrane, usually calculated via the Nernst equation [V] required t_counter float bulk solution transport number of the counter ion. [dimensionless]. Must be between 0 and 1. 0.5 Returns: Type Description float float: Apparent permselectivity of the membrane, [dimensionless] Notes Apparent permselectivity ranges from 0 to 1, where 0 represents a non-selective membrane and 1 represents a perfectly-selective membrane. Apparent permselectivity is calculated from the membrane potential and differs from the \"true\" permselectivity. The equation is: \\alpha_{app} = \\frac{\\frac{E_{mem}}{E_{ideal}} + 1 - 2 t_{counter}} {2 t_{co}} References Kingsbury, R. S.; Coronell, O. Modelling and validation of concentration dependence of ion exchange membrane permselectivity: significance of convection and Manning\u2019s counter-ion condensation theory. J. Membrane Science XXXX. Source code in membrane_toolkit/core/potential.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def apparent_permselectivity ( E_mem : float , E_ideal : float , t_counter : float = 0.5 , ) -> float : \"\"\" Calculate the apparent permselectivity of a membrane from the membrane potential. Args: E_mem (float): Electrical potential across the membrane [V] E_ideal (float): Electrical potential across an ideally-selective membrane, usually calculated via the Nernst equation [V] t_counter (float): bulk solution transport number of the counter ion. [dimensionless]. Must be between 0 and 1. Returns: float: Apparent permselectivity of the membrane, [dimensionless] Notes: Apparent permselectivity ranges from 0 to 1, where 0 represents a non-selective membrane and 1 represents a perfectly-selective membrane. Apparent permselectivity is calculated from the membrane potential and differs from the \"true\" permselectivity. The equation is: $$ \\\\alpha_{app} = \\\\frac{\\\\frac{E_{mem}}{E_{ideal}} + 1 - 2 t_{counter}} {2 t_{co}} $$ References: Kingsbury, R. S.; Coronell, O. Modelling and validation of concentration dependence of ion exchange membrane permselectivity: significance of convection and Manning\u2019s counter-ion condensation theory. J. Membrane Science XXXX. \"\"\" # t_counter must be between 0 and 1 if t_counter < 0 or t_counter > 1 : raise ValueError ( \"Counter-ion transport number must be between 0 and 1. \" \"t_counter= {:.3f} \" . format ( t_counter ) ) return ( E_mem / E_ideal + 1 - 2 * t_counter ) / ( 2 - 2 * t_counter ) nernst_potential ( a0 , aL , z_ct = 1 , temperature = 25 ) \u00b6 Calculate the ideal membrane or interface potential according to the Nernst equation. Parameters: Name Type Description Default a0 float Activity (or concentration) of the electrolyte on the left (x=0) side of the membrane. The units of a0 and aL must match. required aL float Activity (or concentration) of the electrolyte on the left (x=0) side of the membrane. The units of a0 and aL must match. required z_ct int signed charge of the counter-ion species. Default = +1 1 temperature float Temperature of the electrolyte [C]. Default = 25 C 25 Returns: Type Description float The potential [V] of the left (x=0) interface with respect to the right (x=L) interface, according to the Nernst equation. Notes The Nernst equation gives the electrical potential across an ideally-selective membrane separating two electrolyte solutions. E = \\frac{RT}{z_{ct} F}\\log{\\frac{a0}{aL}} where R (8.314 J/mol K) is the ideal gas constant and F (96485 C/mol) is the Faraday constant. References Bard, A. J.; Faulkner, L. R. Electrochemical Methods: Fundamentals and Applications, 2nd ed.; John Wiley & Sons, 2001. Helfferich, F. Ion Exchange; McGraw-Hill: New York, 1962. Winger, A.; Bodamer, G.; Kunin, R. Some electrochemical properties of new synthetic ion exchange memebranes. J. Electrochem. Soc 1953, 100 (4), 178\u2013184. Source code in membrane_toolkit/core/potential.py 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 def nernst_potential ( a0 : float , aL : float , z_ct : int = 1 , temperature : float = 25 ) -> float : \"\"\" Calculate the ideal membrane or interface potential according to the Nernst equation. Args: a0 (float): Activity (or concentration) of the electrolyte on the left (x=0) side of the membrane. The units of a0 and aL must match. aL (float): Activity (or concentration) of the electrolyte on the left (x=0) side of the membrane. The units of a0 and aL must match. z_ct (int): signed charge of the counter-ion species. Default = +1 temperature (float): Temperature of the electrolyte [C]. Default = 25 C Returns: The potential [V] of the left (x=0) interface with respect to the right (x=L) interface, according to the Nernst equation. Notes: The Nernst equation gives the electrical potential across an ideally-selective membrane separating two electrolyte solutions. $$ E = \\\\frac{RT}{z_{ct} F}\\\\log{\\\\frac{a0}{aL}} $$ where R (8.314 J/mol K) is the ideal gas constant and F (96485 C/mol) is the Faraday constant. References: Bard, A. J.; Faulkner, L. R. Electrochemical Methods: Fundamentals and Applications, 2nd ed.; John Wiley & Sons, 2001. Helfferich, F. Ion Exchange; McGraw-Hill: New York, 1962. Winger, A.; Bodamer, G.; Kunin, R. Some electrochemical properties of new synthetic ion exchange memebranes. J. Electrochem. Soc 1953, 100 (4), 178\u2013184. \"\"\" if a0 < 0 : raise ValueError ( \"Received invalid activity argument of a0 = {} . Electrolyte\" \"activity must be positive.\" . format ( a0 ) ) if aL < 0 : raise ValueError ( \"Received invalid activity argument of aL = {} . Electrolyte\" \"activity must be positive.\" . format ( aL ) ) if temperature < - 273.15 : raise ValueError ( \"Received invalid temperature argument of {} . Temperature\" \"is below absolute zero!\" . format ( temperature ) ) return 8.314 * ( temperature + 273.15 ) / z_ct / 96485 * np . log ( a0 / aL ) transport_number () \u00b6 Calculate the transport number of an ionic species in the membrane Source code in membrane_toolkit/core/potential.py 53 54 55 56 57 def transport_number (): \"\"\" Calculate the transport number of an ionic species in the membrane \"\"\" pass","title":"Core Functions"},{"location":"core_functions/core_functions/#membrane_toolkit.core.diffusion","text":"Diffusion coefficient methods All should start with diffusion_coefficient_","title":"membrane_toolkit.core.diffusion"},{"location":"core_functions/core_functions/#membrane_toolkit.core.diffusion.diffusion_coefficient_free_volume","text":"Calculate the membrane-phase diffusion coefficient according to the free-volume model. Source code in membrane_toolkit/core/diffusion.py 47 48 49 50 51 52 def diffusion_coefficient_free_volume (): \"\"\" Calculate the membrane-phase diffusion coefficient according to the free-volume model. \"\"\" pass","title":"diffusion_coefficient_free_volume()"},{"location":"core_functions/core_functions/#membrane_toolkit.core.diffusion.diffusion_coefficient_mackie_meares","text":"Calculate the membrane-phase diffusion coefficient according to the Mackie-Meares model. Parameters: Name Type Description Default D_bulk float Bulk diffusion coefficient, [L**2 / t] required phi_w float Water volume fraction (0 < \\phi_w < 1) in the membrane [dimensionless] required Returns: Type Description float float: Diffusion coefficient in the membrane, [L**2 / t] Notes The Mackie-Meares model relates the bulk diffusion coefficient of a species to its diffusion coefficient inside a porous medium through the volume fraction of water (or porosity) of that medium. The equation is D_{mem} = D_{bulk} * ( \\frac{\\phi_w}{2-\\phi_w} )^2 References Mackie, J. S.; Meares, P. The Diffusion of Electrolytes in a Cation-Exchange Resin Membrane. I. Theoretical. Proc. R. Soc. London A 1955, 232 (1191), 498\u2013509. Source code in membrane_toolkit/core/diffusion.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def diffusion_coefficient_mackie_meares ( D_bulk : float , phi_w : float ) -> float : \"\"\" Calculate the membrane-phase diffusion coefficient according to the Mackie-Meares model. Args: D_bulk (float): Bulk diffusion coefficient, [L**2 / t] phi_w (float): Water volume fraction (0 < \\( \\\\phi_w \\) < 1) in the membrane [dimensionless] Returns: float: Diffusion coefficient in the membrane, [L**2 / t] Notes: The Mackie-Meares model relates the bulk diffusion coefficient of a species to its diffusion coefficient inside a porous medium through the volume fraction of water (or porosity) of that medium. The equation is $$ D_{mem} = D_{bulk} * ( \\\\frac{\\\\phi_w}{2-\\\\phi_w} )^2 $$ References: Mackie, J. S.; Meares, P. The Diffusion of Electrolytes in a Cation-Exchange Resin Membrane. I. Theoretical. Proc. R. Soc. London A 1955, 232 (1191), 498\u2013509. \"\"\" if phi_w < 0 or phi_w > 1 : raise ValueError ( \"Invalid phi_w = {} . phi_w must be between 0 and 1\" . format ( phi_w ) ) return D_bulk * ( phi_w / ( 2 - phi_w )) ** 2","title":"diffusion_coefficient_mackie_meares()"},{"location":"core_functions/core_functions/#membrane_toolkit.core.donnan","text":"Donnan exclusion module","title":"membrane_toolkit.core.donnan"},{"location":"core_functions/core_functions/#membrane_toolkit.core.donnan.donnan_equilibrium","text":"Calculate the Donnan equilibrium at the interface between Phase1 and Phase2. Parameters: Name Type Description Default C_bulk float bulk salt concentration [mol/L] required C_fix float fixed charge concentration, without sign [mol/L] required z_counter int signed charge of the counter-ion. Default = +1 [dimensionless] 1 z_co int signed charge of the co-ion. By definition, this must have the same sign as the co-ion. Default = -1 [dimensionless] -1 nu_counter int stoichiometric coefficient of the counter-ion. Default = 1 [dimensionless] 1 nu_co int stoichiometric coefficient of the co-ion. Default = 1 [dimensionless] 1 z_fix int signed charge of the fixed groups. Default = -1 [dimensionless] -1 gamma float stoichiometrically-weighted ratio of salt activity coefficient in solution to that in the membrane Default = 1 [dimensionless]. 1 Returns: Type Description float The co-ion concentration in the membrane [mol/L]. Note that for salts containing one or more multivalent ions, this is not the same as the mobile salt concentration. Exceptions: Type Description AssertionError If the input stoichiometry is incorrect. Both \\nu must be positive, z_{counter} and z_{fix} must have opposite signs, and \\nu_{counter} * z_{counter} + \\nu_{co} * z_{co} must equal zero. Notes The Donnan equilibrium between a membrane with fixed charged concentration \\bar C_{fix} (mol per L water sorbed) and a salt solution of bulk concentration C_s (mol/L) is given by: \\bar C_{co}^{\\nu_{co}} \\big ( \\frac{z_{co} \\bar C_{co} + z_{fix} \\bar C_{fix}}{z_{ct}} \\big )^{\\nu_{ct}} = - \\Gamma \\nu_{ct}^{\\nu_{ct}} \\nu_{co}^{\\nu_{co}} C_s^{\\nu_{ct} + \\nu_{co}} where subscripts co and ct indicate the co-ion (same charge as the membrane) and counter-ion (opposite charge to the membrane), \\nu (dimensionless) are stoichiometric coefficients, and overbars indicate membrane-phase quantities, in units of moles per liter of water sorbed by the membrane. \\Gamma (dimensionless) is the ratio of activity coefficients in the bulk solution to those in the membrane, given by: \\Gamma = \\frac{\\gamma_{\\pm}^{\\nu_{ct} + \\nu_{co}}}{\\bar \\gamma_{ct}^{\\nu_{ct}} \\bar \\gamma_{co}^{\\nu_{co}}} Traditionally, \\Gamma is either set to 1 (implying that ion activity coefficients are the same in the membrane and in bulk solution), or the ions are assumed to behave ideally in the membrane (activity coefficient in the membrane equal to 1), in which case $\\Gamma$ \\Gamma equals the bulk solution activity coefficient. More recently, Manning theory has been used to compute the membrane-phase activity coefficients, making possible a direct calculation of \\Gamma . References Donnan, F. G. The theory of membrane equilibria. Chem. Rev. 1924, 1 (1), 73\u201390. Kamcev, J.; Galizia, M.; Benedetti, F. M.; Jang, E.-S.; Paul, D. R.; Freeman, B.; Manning, G. S. Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation. Phys. Chem. Chem. Phys. 2016, No. 8, 6021\u20136031. Galizia, M.; Manning, G. S.; Paul, D. R.; Freeman, B. D. Ion partitioning between brines and ion exchange polymers. Polymer (Guildf). 2019, 165 (January), 91\u2013100. Kingsbury, R. S.; Coronell, O. Modelling and validation of concentration dependence of ion exchange membrane permselectivity: significance of convection and Manning\u2019s counter-ion condensation theory. Submitted. Source code in membrane_toolkit/core/donnan.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 def donnan_equilibrium ( C_bulk : float , C_fix : float , z_counter : int = 1 , z_co : int = - 1 , nu_counter : int = 1 , nu_co : int = 1 , z_fix : int = - 1 , gamma : float = 1 , ): \"\"\" Calculate the Donnan equilibrium at the interface between Phase1 and Phase2. Args: C_bulk: bulk salt concentration [mol/L] C_fix: fixed charge concentration, without sign [mol/L] z_counter: signed charge of the counter-ion. Default = +1 [dimensionless] z_co: signed charge of the co-ion. By definition, this must have the same sign as the co-ion. Default = -1 [dimensionless] nu_counter: stoichiometric coefficient of the counter-ion. Default = 1 [dimensionless] nu_co: stoichiometric coefficient of the co-ion. Default = 1 [dimensionless] z_fix: signed charge of the fixed groups. Default = -1 [dimensionless] gamma: stoichiometrically-weighted ratio of salt activity coefficient in solution to that in the membrane Default = 1 [dimensionless]. Returns: float: The co-ion concentration in the membrane [mol/L]. Note that for salts containing one or more multivalent ions, this is not the same as the mobile salt concentration. Raises: AssertionError: If the input stoichiometry is incorrect. Both \\( \\\\nu \\) must be positive, \\( z_{counter} \\) and \\( z_{fix} \\) must have opposite signs, and \\( \\\\nu_{counter} * z_{counter} \\) + \\( \\\\nu_{co} * z_{co} \\) must equal zero. Notes: The Donnan equilibrium between a membrane with fixed charged concentration \\( \\\\bar C_{fix} \\) (mol per L water sorbed) and a salt solution of bulk concentration \\( C_s \\) (mol/L) is given by: $$ \\\\bar C_{co}^{\\\\nu_{co}} \\\\big ( \\\\frac{z_{co} \\\\bar C_{co} + z_{fix} \\\\bar C_{fix}}{z_{ct}} \\ \\\\big )^{\\\\nu_{ct}} = - \\\\Gamma \\\\nu_{ct}^{\\\\nu_{ct}} \\\\nu_{co}^{\\\\nu_{co}} C_s^{\\\\nu_{ct} + \\\\nu_{co}} $$ where subscripts \\( co \\) and \\( ct \\) indicate the co-ion (same charge as the membrane) and counter-ion (opposite charge to the membrane), \\( \\\\nu \\) (dimensionless) are stoichiometric coefficients, and overbars indicate membrane-phase quantities, in units of moles per liter of water sorbed by the membrane. \\( \\\\Gamma \\) (dimensionless) is the ratio of activity coefficients in the bulk solution to those in the membrane, given by: $$ \\\\Gamma = \\\\frac{\\\\gamma_{\\\\pm}^{\\\\nu_{ct} + \\ \\\\nu_{co}}}{\\\\bar \\\\gamma_{ct}^{\\\\nu_{ct}} \\\\bar \\\\gamma_{co}^{\\\\nu_{co}}} $$ Traditionally, \\( \\\\Gamma \\) is either set to 1 (implying that ion activity coefficients are the same in the membrane and in bulk solution), or the ions are assumed to behave ideally in the membrane (activity coefficient in the membrane equal to 1), in which case $\\Gamma$ equals the bulk solution activity coefficient. More recently, Manning theory has been used to compute the membrane-phase activity coefficients, making possible a direct calculation of \\( \\\\Gamma \\). References: Donnan, F. G. The theory of membrane equilibria. Chem. Rev. 1924, 1 (1), 73\u201390. Kamcev, J.; Galizia, M.; Benedetti, F. M.; Jang, E.-S.; Paul, D. R.; Freeman, B.; Manning, G. S. Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation. Phys. Chem. Chem. Phys. 2016, No. 8, 6021\u20136031. Galizia, M.; Manning, G. S.; Paul, D. R.; Freeman, B. D. Ion partitioning between brines and ion exchange polymers. Polymer (Guildf). 2019, 165 (January), 91\u2013100. Kingsbury, R. S.; Coronell, O. Modelling and validation of concentration dependence of ion exchange membrane permselectivity: significance of convection and Manning\u2019s counter-ion condensation theory. Submitted. \"\"\" # validate input arguments assert nu_counter > 0 assert nu_co > 0 assert nu_counter * z_counter == - 1 * nu_co * z_co assert z_fix * z_counter < 0 def _donnan_solver ( C_co ): # private function to interatively solve for co-ion concentration. # return the error squared so we can utilize a scalar minimization routine return C_co ** nu_co * ( ( z_co * C_co + z_fix * C_fix ) / z_counter ) ** nu_counter + gamma * nu_co ** nu_co * nu_counter ** nu_counter * C_bulk ** ( nu_counter + nu_co ) # solve the function above using one of scipy's nonlinear solvers # from scipy.optimize import minimize from scipy.optimize import root_scalar # call a solver to solve for the co-ion concentration # result = minimize(_donnan_solver, 0.01, method=\"TNC\", bounds=[(0, C_bulk * nu_co * 10)]) result = root_scalar ( _donnan_solver , x0 = 0.01 , x1 = C_bulk * nu_co , bracket = ( 0 , C_bulk * nu_co * 2 ) ) # after solving for the co-ion concentration, # calculate the counter-ion concentraiton, Cg # result_counter = -(result_co * z_co + zfix * Cfix) / z_counter if result . converged : return result . root else : raise ValueError ( \" {} failed to find a solution\" . format ( __name__ ))","title":"donnan_equilibrium()"},{"location":"core_functions/core_functions/#membrane_toolkit.core.manning","text":"","title":"membrane_toolkit.core.manning"},{"location":"core_functions/core_functions/#membrane_toolkit.core.manning.beta","text":"Return an ion activity coefficient inside a charged polymer, according to Manning theory","title":"beta()"},{"location":"core_functions/core_functions/#parameters","text":"xi : float Number representing the Manning parameter for the polymer, dimensionless. fixed_charge : str quantity String representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. C_counter : str quantity String representing the counter-ion concentration inside the polymer. Must be specified in mol/L of water absorbed by the polymer. Cs : str quantity String representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. type : str, optional : Specifies whether the counter-ion, co-ion, or the mean ionic activity coefficient is returned. Valid arguments are 'counter' or 'co'. nu_counter, nu_co : int, optional Stoichiometric coefficients of the counter-ion and co-ion in the parent salt. Defautls to 1 if not specified. z_counter, z_co : int, optional Net charge, including sign, of the counter-ion and co-ion in the parent salt. Defaults to +1 and -1 if not specified. Note that the sign of z_counter must be opposite to the sign of fixed_charge, while the sign of z_co must match that of fixed_Charge.","title":"Parameters"},{"location":"core_functions/core_functions/#returns","text":"Float The thermodynamic factor.","title":"Returns"},{"location":"core_functions/core_functions/#notes","text":"When the Manning parameter is greater than the critical value, the thermodynamic factors are given by [#]_ TODO update \\gamma_+ \\gamma_- = [{{X \\over \\xi} + 1 \\over X +1] exp [{-X \\ over X + 2 \\xi}] and when the Manning Parameter is less than the critical value, by [#]_ TODO update Source code in membrane_toolkit/core/manning.pydef beta ( xi , fixed_charge , C_counter , Cs , type , nu_counter = 1 , nu_co = 1 , z_counter = 1 , z_co =- 1 ): \"\"\" Return an ion activity coefficient inside a charged polymer, according to Manning theory Parameters ---------- xi : float Number representing the Manning parameter for the polymer, dimensionless. fixed_charge : str quantity String representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. C_counter : str quantity String representing the counter-ion concentration inside the polymer. Must be specified in mol/L of water absorbed by the polymer. Cs : str quantity String representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. type : str, optional : Specifies whether the counter-ion, co-ion, or the mean ionic activity coefficient is returned. Valid arguments are 'counter' or 'co'. nu_counter, nu_co : int, optional Stoichiometric coefficients of the counter-ion and co-ion in the parent salt. Defautls to 1 if not specified. z_counter, z_co : int, optional Net charge, including sign, of the counter-ion and co-ion in the parent salt. Defaults to +1 and -1 if not specified. Note that the sign of z_counter must be opposite to the sign of fixed_charge, while the sign of z_co must match that of fixed_Charge. Returns ------- Float The thermodynamic factor. Notes ----- When the Manning parameter is greater than the critical value, the thermodynamic factors are given by [#]_ TODO update $$ \\\\gamma_+ \\\\gamma_- = [{{X \\\\over \\\\xi} + 1 \\\\over X +1] exp [{-X \\\\ over X + 2 \\\\xi}] $$ and when the Manning Parameter is less than the critical value, by [#]_ TODO update \"\"\" # check to make sure the signs of the input arguments are correct if ureg ( fixed_charge ) . magnitude < 0 : if not ( z_counter > 0 and z_co < 0 ): raise Exception ( \"Mismatch between signs of fixed charge, counter-ion, and \\ co-ion. Aborting.\" ) elif ureg ( fixed_charge ) . magnitude >= 0 : if not ( z_counter < 0 and z_co > 0 ): raise Exception ( \"Mismatch between signs of fixed charge, counter-ion, and \\ co-ion. Aborting.\" ) # calculate the critical value of the Manning parameter xi_critical = 1 / abs ( z_counter ) # select the appropriate expression based on the value # of the Manning parameter if xi >= xi_critical : # return the correct value depending on the 'type' argument if type == \"counter\" : beta_counter = ( 1 + ureg ( fixed_charge ) * ( 1 - 1 / abs ( z_counter ) / xi ) / ( ureg ( fixed_charge ) / abs ( z_counter ) / xi + abs ( z_counter ) * nu_counter * ureg ( Cs ) ) + ( nu_counter + nu_co ) * abs ( z_counter ) * xi * ureg ( fixed_charge ) * ureg ( C_counter ) / ( 2 * ( ureg ( fixed_charge ) + abs ( z_counter ) * nu_counter * ( nu_counter + nu_co ) * xi * ureg ( Cs ) ) ** 2 ) ) return beta_counter . magnitude elif type == \"co\" : beta_co = ( 1 + 0.5 * ( z_co / z_counter ) ** 2 * abs ( z_counter ) * nu_counter * ( nu_co + nu_counter ) * xi * ureg ( fixed_charge ) * ureg ( Cs ) / ( ureg ( fixed_charge ) + abs ( z_counter ) * nu_counter * ( nu_co + nu_counter ) * xi * ureg ( Cs ) ) ** 2 ) return beta_co . magnitude else : raise Exception ( 'Invalid \"type\" argument. Enter \"counter\", \"co\", \\ or \"mean\"' ) elif xi < xi_critical : raise Exception ( \"Cannot calculate beta when Manning parameter is below \\ critical value\" ) return None","title":"Notes"},{"location":"core_functions/core_functions/#membrane_toolkit.core.manning.diffusion_coefficient_manning","text":"Return a diffusion coefficient inside a charged polymer, according to Manning theory","title":"diffusion_coefficient_manning()"},{"location":"core_functions/core_functions/#parameters","text":"xi : float Number representing the Manning parameter for the polymer, dimensionless. fixed_charge : str quantity String representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. Cs : str quantity String representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. vol_frac : float The volume fraction of water sorbed by the ion exchange membrane. type : str, optional : Specifies whether the counter-ion, co-ion, or the mean ionic activity coefficient is returned. Valid arguments are 'counter', 'co'. Defaults to 'counter' if not specified. nu_counter, nu_co : int, optional Stoichiometric coefficients of the counter-ion and co-ion in the parent salt. Defautls to 1 if not specified. z_counter, z_co : int, optional Net charge, including sign, of the counter-ion and co-ion in the parent salt. Defaults to +1 and -1 if not specified. Note that the sign of z_counter must be opposite to the sign of fixed_charge, while the sign of z_co must match that of fixed_Charge.","title":"Parameters"},{"location":"core_functions/core_functions/#returns","text":"Float The mean or individual ion diffusion coefficient inside the polymer, normalized by the ion diffusion coefficient in bulk solution (D_mem / D_bulk).","title":"Returns"},{"location":"core_functions/core_functions/#notes","text":"Ion diffusion coefficients when the Manning Parameter is greater than the critical value are given by [#]_ TODO update \\frac{D_g}{D_g^s} Where $A$ is equal to \\sum_{m1} \\sum_{m2} [ \\pi |z_g|(m_1^2+m_2^2)+|z_g|+ \\frac{(\\nu_g \\nu_c)|z_g z_c||z_g| \\xi}{X}]^-2","title":"Notes"},{"location":"core_functions/core_functions/#references","text":".. [#] J. Kamcev, M. Galizia, F.M. Benedetti, E.-S. Jang, D.R. Paul, B. Freeman, et al., Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation, Phys. Chem. Chem. Phys. (2016). doi:10.1039/C5CP06747B. .. [#] Manning, G. S. Limiting Laws and Counterion Condensation in Polyelectrolyte Solutions I. Colligative Properties. J. Chem. Phys. 1969, 51 (3), 924\u2013933.","title":"References"},{"location":"core_functions/core_functions/#examples","text":"","title":"Examples"},{"location":"core_functions/core_functions/#an-example-based-on-figure-7-of-the-kamcev-reference","text":"manning.diffusion_coefficient_manning(2,'-3.21 mol/L','1 mol/L',0.5,type='co') 0.10082061291437808 Source code in membrane_toolkit/core/manning.pydef diffusion_coefficient_manning ( xi , fixed_charge , Cs , vol_frac , type = \"counter\" , nu_counter = 1 , nu_co = 1 , z_counter = 1 , z_co =- 1 , ): \"\"\" Return a diffusion coefficient inside a charged polymer, according to Manning theory Parameters ---------- xi : float Number representing the Manning parameter for the polymer, dimensionless. fixed_charge : str quantity String representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. Cs : str quantity String representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. vol_frac : float The volume fraction of water sorbed by the ion exchange membrane. type : str, optional : Specifies whether the counter-ion, co-ion, or the mean ionic activity coefficient is returned. Valid arguments are 'counter', 'co'. Defaults to 'counter' if not specified. nu_counter, nu_co : int, optional Stoichiometric coefficients of the counter-ion and co-ion in the parent salt. Defautls to 1 if not specified. z_counter, z_co : int, optional Net charge, including sign, of the counter-ion and co-ion in the parent salt. Defaults to +1 and -1 if not specified. Note that the sign of z_counter must be opposite to the sign of fixed_charge, while the sign of z_co must match that of fixed_Charge. Returns ------- Float The mean or individual ion diffusion coefficient inside the polymer, normalized by the ion diffusion coefficient in bulk solution (D_mem / D_bulk). Notes ----- Ion diffusion coefficients when the Manning Parameter is greater than the critical value are given by [#]_ TODO update $$ \\\\frac{D_g}{D_g^s} $$ Where $A$ is equal to $$ \\\\sum_{m1} \\\\sum_{m2} [ \\\\pi |z_g|(m_1^2+m_2^2)+|z_g|+ \\\\frac{(\\\\nu_g \\\\nu_c)|z_g z_c||z_g| \\\\xi}{X}]^-2 $$ References ---------- .. [#] J. Kamcev, M. Galizia, F.M. Benedetti, E.-S. Jang, D.R. Paul, B. Freeman, et al., Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation, Phys. Chem. Chem. Phys. (2016). doi:10.1039/C5CP06747B. .. [#] Manning, G. S. Limiting Laws and Counterion Condensation in Polyelectrolyte Solutions I. Colligative Properties. J. Chem. Phys. 1969, 51 (3), 924\u2013933. Examples -------- # an example based on Figure 7 of the Kamcev Reference >>> manning.diffusion_coefficient_manning(2,'-3.21 mol/L','1 mol/L',0.5,type='co') 0.10082061291437808 \"\"\" # check to make sure the signs of the input arguments are correct if ureg ( fixed_charge ) . magnitude < 0 : if not ( z_counter > 0 and z_co < 0 ): raise Exception ( \"Mismatch between signs of fixed charge, counter-ion, and co-ion. Aborting.\" ) elif ureg ( fixed_charge ) . magnitude >= 0 : if not ( z_counter < 0 and z_co > 0 ): raise Exception ( \"Mismatch between signs of fixed charge, counter-ion, and co-ion. Aborting.\" ) # calculate the ratio of fixed charge to mobile salt concentration X = abs ( ureg ( fixed_charge ) / ureg ( Cs )) . magnitude # calculate the critical value of the Manning parameter xi_critical = 1 / abs ( z_counter ) # select the appropriate activity coefficient expression based on the value # of the Manning parameter if xi >= xi_critical : A = _A ( 1 / abs ( z_counter ), X / xi / abs ( z_counter ), nu_counter = nu_counter , nu_co = nu_co , z_counter = z_counter , z_co = z_co , ) D_counter = ( ( ( X / ( z_counter ** 2 * nu_counter * xi ) + 1 ) / ( X / ( abs ( z_counter ) * nu_counter ) + 1 ) ) * ( 1 - 1 / 3 * z_counter ** 2 * A ) * ( vol_frac / ( 2 - vol_frac )) ** 2 ) elif xi < xi_critical : A = _A ( xi , X , nu_counter = nu_counter , nu_co = nu_co , z_counter = z_counter , z_co = z_co ) D_counter = ( 1 - 1 / 3 * z_counter ** 2 * A ) * ( vol_frac / ( 2 - vol_frac )) ** 2 D_co = ( 1 - 1 / 3 * z_co ** 2 * A ) * ( vol_frac / ( 2 - vol_frac )) ** 2 # return the correct value depending on the 'type' argument if type == \"counter\" : return D_counter elif type == \"co\" : return D_co else : raise Exception ( 'Invalid \"type\" argument. Enter \"counter\" or \"co\"' )","title":"an example based on Figure 7 of the Kamcev Reference"},{"location":"core_functions/core_functions/#membrane_toolkit.core.manning.fit_manning_parameter","text":"Fit the manning parameter based on co - ion sorption data . # define an iterative method to solve for the manning parameter , given the co - ion concentraiton def solve_manning_param(charge,coion_conc): def solve(xi,charge,coion_conc): # define C and D solutions cation = 'Na+' anion = 'Cl-' C_conc = '0.5 mol/L' temp = '22 degC' # identify the co-ion if charge < 0 : coion = 'Cl-' elif charge > 0 : coion = 'Na+' !!! else print ( 'Membrane is uncharged!' ) return None # create C and D solutions C_soln = pyEQL . Solution ([[ cation , C_conc ],[ anion , C_conc ]], temperature = temp ) # equilibrate the bulk solution with the membrane C_soln_mem = manning . manning_eql ( C_soln , xi , str ( charge ) + 'mol/L' ) C_co = C_soln_mem . get_amount ( coion , 'mol/L' ) . magnitude return ( C_co - coion_conc ) ** 2 from scipy.optimize import minimize result = minimize ( solve , 1 , args = ( charge , coion_conc ) , method = 'Nelder-Mead' , tol = 1e-4 , options = { 'maxiter' : 100 , 'disp' : True }) return result . x [ 0 ] Source code in membrane_toolkit/core/manning.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def fit_manning_parameter (): \"\"\" Fit the manning parameter based on co-ion sorption data. # define an iterative method to solve for the manning parameter, given the co-ion concentraiton def solve_manning_param(charge,coion_conc): def solve(xi,charge,coion_conc): # define C and D solutions cation = 'Na+' anion = 'Cl-' C_conc = '0.5 mol/L' temp = '22 degC' # identify the co-ion if charge < 0: coion = 'Cl-' elif charge >0: coion = 'Na+' else: print('Membrane is uncharged!') return None # create C and D solutions C_soln = pyEQL.Solution([[cation,C_conc],[anion,C_conc]],temperature=temp) # equilibrate the bulk solution with the membrane C_soln_mem = manning.manning_eql(C_soln,xi,str(charge)+'mol/L') C_co = C_soln_mem.get_amount(coion,'mol/L').magnitude return (C_co - coion_conc)**2 from scipy.optimize import minimize result = minimize(solve,1,args=(charge,coion_conc) ,method='Nelder-Mead',tol=1e-4,options={'maxiter':100,'disp':True}) return result.x[0] \"\"\" pass","title":"fit_manning_parameter()"},{"location":"core_functions/core_functions/#membrane_toolkit.core.manning.get_activity_coefficient_manning","text":"Return an ion activity coefficient inside a charged polymer, according to Manning theory","title":"get_activity_coefficient_manning()"},{"location":"core_functions/core_functions/#parameters","text":"xi : float Number representing the Manning parameter for the polymer, dimensionless. fixed_charge : str quantity String representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. Cs : str quantity String representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. type : str, optional : Specifies whether the counter-ion, co-ion, or the mean ionic activity coefficient is returned. Valid arguments are 'counter', 'co', and 'mean'. Defaults to 'mean' if not specified. nu_counter, nu_co : int, optional Stoichiometric coefficients of the counter-ion and co-ion in the parent salt. Defautls to 1 if not specified. z_counter, z_co : int, optional Net charge, including sign, of the counter-ion and co-ion in the parent salt. Defaults to +1 and -1 if not specified. Note that the sign of z_counter must be opposite to the sign of fixed_charge, while the sign of z_co must match that of fixed_Charge.","title":"Parameters"},{"location":"core_functions/core_functions/#returns","text":"Float The mean or individual ion activity coefficient inside the polymer.","title":"Returns"},{"location":"core_functions/core_functions/#notes","text":"Ion activity coefficients when the Manning Parameter is greater than the critical value are given by [#]_ TODO update \\gamma_+ \\gamma_- = [{{X \\over \\xi} + 1 \\over X +1] exp [{-X \\ over X + 2 \\xi}] and when the Manning Parameter is less than the critical value, by [#]_ TODO update","title":"Notes"},{"location":"core_functions/core_functions/#references","text":".. [#] J. Kamcev, M. Galizia, F.M. Benedetti, E.-S. Jang, D.R. Paul, B. Freeman, et al., Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation, Phys. Chem. Chem. Phys. (2016). doi:10.1039/C5CP06747B. .. [#] Manning, G. S. Limiting Laws and Counterion Condensation in Polyelectrolyte Solutions I. Colligative Properties. J. Chem. Phys. 1969, 51 (3), 924\u2013933.","title":"References"},{"location":"core_functions/core_functions/#examples","text":"TODO","title":"Examples"},{"location":"core_functions/core_functions/#see-also","text":"TODO Source code in membrane_toolkit/core/manning.pydef get_activity_coefficient_manning ( xi , fixed_charge , Cs , type = \"mean\" , nu_counter = 1 , nu_co = 1 , z_counter = 1 , z_co =- 1 ): \"\"\" Return an ion activity coefficient inside a charged polymer, according to Manning theory Parameters ---------- xi : float Number representing the Manning parameter for the polymer, dimensionless. fixed_charge : str quantity String representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the polymer. Note that monovalent charged groups are assumed. Cs : str quantity String representing the concentraiton of mobile salt inside the polymer. Must be specified in mol/L of water absorbed by the polymer. type : str, optional : Specifies whether the counter-ion, co-ion, or the mean ionic activity coefficient is returned. Valid arguments are 'counter', 'co', and 'mean'. Defaults to 'mean' if not specified. nu_counter, nu_co : int, optional Stoichiometric coefficients of the counter-ion and co-ion in the parent salt. Defautls to 1 if not specified. z_counter, z_co : int, optional Net charge, including sign, of the counter-ion and co-ion in the parent salt. Defaults to +1 and -1 if not specified. Note that the sign of z_counter must be opposite to the sign of fixed_charge, while the sign of z_co must match that of fixed_Charge. Returns ------- Float The mean or individual ion activity coefficient inside the polymer. Notes ----- Ion activity coefficients when the Manning Parameter is greater than the critical value are given by [#]_ TODO update $$ \\\\gamma_+ \\\\gamma_- = [{{X \\\\over \\\\xi} + 1 \\\\over X +1] exp [{-X \\\\ over X + 2 \\\\xi}] $$ and when the Manning Parameter is less than the critical value, by [#]_ TODO update References ---------- .. [#] J. Kamcev, M. Galizia, F.M. Benedetti, E.-S. Jang, D.R. Paul, B. Freeman, et al., Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation, Phys. Chem. Chem. Phys. (2016). doi:10.1039/C5CP06747B. .. [#] Manning, G. S. Limiting Laws and Counterion Condensation in Polyelectrolyte Solutions I. Colligative Properties. J. Chem. Phys. 1969, 51 (3), 924\u2013933. Examples -------- TODO See Also -------- TODO \"\"\" # check to make sure the signs of the input arguments are correct if ureg ( fixed_charge ) . magnitude < 0 : if not ( z_counter > 0 and z_co < 0 ): raise Exception ( \"Mismatch between signs of fixed charge, counter-ion, and co-ion. Aborting.\" ) elif ureg ( fixed_charge ) . magnitude >= 0 : if not ( z_counter < 0 and z_co > 0 ): raise Exception ( \"Mismatch between signs of fixed charge, counter-ion, and co-ion. Aborting.\" ) # verify that the stoichiometry of the salt makes sense if z_counter * nu_counter != - 1 * z_co * nu_co : raise Exception ( \"Error in input stoichiometry. z_counter * n_counter != | z_co * nu_co |. Aborting.\" ) # calculate the ratio of fixed charge to mobile salt concentration X = abs ( ureg ( fixed_charge ) / ureg ( Cs )) . magnitude # calculate the critical value of the Manning parameter xi_critical = 1 / abs ( z_counter ) # select the appropriate activity coefficient expression based on the value # of the Manning parameter if xi >= xi_critical : gamma_counter = ( ( X / abs ( z_counter ) / xi + abs ( z_counter ) * nu_counter ) / ( X + abs ( z_counter ) * nu_counter ) ) * math . exp ( - ( X / 2 ) / ( X + abs ( z_co * z_counter ) * xi * ( nu_co + nu_counter ))) gamma_co = math . exp ( - ( X / 2 * ( z_co / z_counter ) ** 2 ) / ( X + abs ( z_co * z_counter ) * xi * ( nu_co + nu_counter )) ) elif xi < xi_critical : common_factor = - ( xi * X / 2 ) / ( X * abs ( z_counter ) + ( nu_counter * z_counter ** 2 + nu_co * z_co ** 2 ) ) gamma_counter = math . exp ( common_factor * z_counter ** 2 ) gamma_co = math . exp ( common_factor * z_co ** 2 ) # return the correct value depending on the 'type' argument if type == \"counter\" : return gamma_counter elif type == \"co\" : return gamma_co elif type == \"mean\" : return ( gamma_counter ** nu_counter * gamma_co ** nu_co ) ** ( 1 / ( nu_counter + nu_co ) ) else : raise Exception ( \"Invalid 'type' argument. Enter 'counter'', 'co', or 'mean'\" )","title":"See Also"},{"location":"core_functions/core_functions/#membrane_toolkit.core.manning.manning_eql","text":"Return a solution object in equilibrium with fixed_charge, according to Manning's Counter-ion Condensation theory","title":"manning_eql()"},{"location":"core_functions/core_functions/#parameters","text":"xi : float Number representing the Manning parameter, dimensionless. fixed_charge : str quantity String representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the membrane Solution : Solution object The external solution to be brought into equilibrium with the fixed charges","title":"Parameters"},{"location":"core_functions/core_functions/#returns","text":"Solution A solution that has established Donnan-Manning equilibrium with the external (input) Solution","title":"Returns"},{"location":"core_functions/core_functions/#notes","text":"The equation solved when the Manning Parameter is greater than 1 is:[#]_ TODO insert equations","title":"Notes"},{"location":"core_functions/core_functions/#references","text":".. [#] J. Kamcev, M. Galizia, F.M. Benedetti, E.-S. Jang, D.R. Paul, B. Freeman, et al., Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation, Phys. Chem. Chem. Phys. (2016). doi:10.1039/C5CP06747B. .. [#] G.S. Manning, Limiting Laws and Counterion Condensation in Polyelectrolyte Solutions I. Colligative Properties, J. Chem. Phys. 51 (1969) 924\u2013933. doi:10.1063/1.1672157.","title":"References"},{"location":"core_functions/core_functions/#examples","text":"TODO","title":"Examples"},{"location":"core_functions/core_functions/#see-also","text":"get_salt() Source code in membrane_toolkit/core/manning.pydef manning_eql ( solution , xi , fixed_charge ): \"\"\" Return a solution object in equilibrium with fixed_charge, according to Manning's Counter-ion Condensation theory Parameters ---------- xi : float Number representing the Manning parameter, dimensionless. fixed_charge : str quantity String representing the concentration of fixed charges, including sign. Must be specified in mol/L of water absorbed by the membrane Solution : Solution object The external solution to be brought into equilibrium with the fixed charges Returns ------- Solution A solution that has established Donnan-Manning equilibrium with the external (input) Solution Notes ----- The equation solved when the Manning Parameter is greater than 1 is:[#]_ TODO insert equations References ---------- .. [#] J. Kamcev, M. Galizia, F.M. Benedetti, E.-S. Jang, D.R. Paul, B. Freeman, et al., Partitioning of Mobile Ions Between Ion Exchange Polymers and Aqueous Salt Solutions: Importance of Counter-ion Condensation, Phys. Chem. Chem. Phys. (2016). doi:10.1039/C5CP06747B. .. [#] G.S. Manning, Limiting Laws and Counterion Condensation in Polyelectrolyte Solutions I. Colligative Properties, J. Chem. Phys. 51 (1969) 924\u2013933. doi:10.1063/1.1672157. Examples -------- TODO See Also -------- get_salt() \"\"\" # identify the salt salt = solution . get_salt () # convert fixed_charge in to a quantity fixed_charge = ureg ( fixed_charge ) # initialize the equilibrated solution - start with a direct copy of the # input / external solution manning_soln = solution . copy () # identify variables from the external solution if fixed_charge . magnitude >= 0 : # AEM, counter-ion is the anion formula_counter = salt . anion formula_co = salt . cation conc_counter = solution . get_amount ( salt . anion , str ( fixed_charge . units )) conc_co = solution . get_amount ( salt . cation , str ( fixed_charge . units )) z_counter = salt . z_anion z_co = salt . z_cation nu_counter = salt . nu_anion nu_co = salt . nu_cation elif fixed_charge . magnitude <= 0 : # CEM, counter-ion is the cation formula_counter = salt . cation formula_co = salt . anion conc_counter = solution . get_amount ( salt . cation , str ( fixed_charge . units )) conc_co = solution . get_amount ( salt . anion , str ( fixed_charge . units )) z_counter = salt . z_cation z_co = salt . z_anion nu_counter = salt . nu_cation nu_co = salt . nu_anion else : warnings . warn ( \"Fixed charge concentration is zero, Donnan equilibrium cannot be \\ established. Returning a copy of the bulk solution.\" ) return manning_soln # do nothing if either of the ion concentrations is zero if conc_counter . magnitude == 0 or conc_co . magnitude == 0 : return manning_soln # fixed charge concentration Cfix = abs ( fixed_charge . magnitude ) zfix = fixed_charge . magnitude / Cfix # calculate the RHS of the equation (the bulk salt activity) RHS = ( solution . get_activity ( formula_counter ) ** nu_counter * solution . get_activity ( formula_co ) ** nu_co ) # define a function representing the donnan-manning equilibrium as a # function of the two unknown actvities to feed to the nonlinear solver def manning_solve ( Cc ): \"\"\"Where Cc is the magnitude of co-ion concentration \"\"\" # solve for the counter-ion concentration by enforcing # electroneutrality using only floats / ints here instead of # quantities helps performance # get the mean activity coefficient of the ions in the polymer gamma_mean = get_activity_coefficient_manning ( xi , str ( fixed_charge ), str ( Cc ) + \"mol/L\" , \"mean\" , nu_counter , nu_co , z_counter , z_co , ) # calculate the LHS of the concentration expression LHS = ( Cc ** nu_co * (( - z_co * Cc - zfix * Cfix ) / z_counter ) ** nu_counter * gamma_mean ** ( nu_counter + nu_co ) ) return LHS - RHS # solve the function above using one of scipy's nonlinear solvers from scipy.optimize import brentq # call a nonlinear solver to solve for the co-ion concentration # the initial guess is to set the co-ion concentration in the membrane # equal to that in the solution result_co = brentq ( manning_solve , 1e-10 , 2 * conc_co . magnitude , xtol = 0.000001 ) # after solving for the co-ion concentration, # calculate the counter-ion concentraiton, Cg result_counter = - ( result_co * z_co + zfix * Cfix ) / z_counter # match the units of the solved concentration to the units given for # fixed_charge units = str ( fixed_charge . units ) # set the cation and anion concentrations in the membrane phase equal # to the result manning_soln . set_amount ( formula_counter , str ( result_counter ) + units ) manning_soln . set_amount ( formula_co , str ( result_co ) + units ) # return the equilibrated solution return manning_soln","title":"See Also"},{"location":"core_functions/core_functions/#membrane_toolkit.core.potential","text":"Membrane potential related methods","title":"membrane_toolkit.core.potential"},{"location":"core_functions/core_functions/#membrane_toolkit.core.potential.apparent_permselectivity","text":"Calculate the apparent permselectivity of a membrane from the membrane potential. Parameters: Name Type Description Default E_mem float Electrical potential across the membrane [V] required E_ideal float Electrical potential across an ideally-selective membrane, usually calculated via the Nernst equation [V] required t_counter float bulk solution transport number of the counter ion. [dimensionless]. Must be between 0 and 1. 0.5 Returns: Type Description float float: Apparent permselectivity of the membrane, [dimensionless] Notes Apparent permselectivity ranges from 0 to 1, where 0 represents a non-selective membrane and 1 represents a perfectly-selective membrane. Apparent permselectivity is calculated from the membrane potential and differs from the \"true\" permselectivity. The equation is: \\alpha_{app} = \\frac{\\frac{E_{mem}}{E_{ideal}} + 1 - 2 t_{counter}} {2 t_{co}} References Kingsbury, R. S.; Coronell, O. Modelling and validation of concentration dependence of ion exchange membrane permselectivity: significance of convection and Manning\u2019s counter-ion condensation theory. J. Membrane Science XXXX. Source code in membrane_toolkit/core/potential.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def apparent_permselectivity ( E_mem : float , E_ideal : float , t_counter : float = 0.5 , ) -> float : \"\"\" Calculate the apparent permselectivity of a membrane from the membrane potential. Args: E_mem (float): Electrical potential across the membrane [V] E_ideal (float): Electrical potential across an ideally-selective membrane, usually calculated via the Nernst equation [V] t_counter (float): bulk solution transport number of the counter ion. [dimensionless]. Must be between 0 and 1. Returns: float: Apparent permselectivity of the membrane, [dimensionless] Notes: Apparent permselectivity ranges from 0 to 1, where 0 represents a non-selective membrane and 1 represents a perfectly-selective membrane. Apparent permselectivity is calculated from the membrane potential and differs from the \"true\" permselectivity. The equation is: $$ \\\\alpha_{app} = \\\\frac{\\\\frac{E_{mem}}{E_{ideal}} + 1 - 2 t_{counter}} {2 t_{co}} $$ References: Kingsbury, R. S.; Coronell, O. Modelling and validation of concentration dependence of ion exchange membrane permselectivity: significance of convection and Manning\u2019s counter-ion condensation theory. J. Membrane Science XXXX. \"\"\" # t_counter must be between 0 and 1 if t_counter < 0 or t_counter > 1 : raise ValueError ( \"Counter-ion transport number must be between 0 and 1. \" \"t_counter= {:.3f} \" . format ( t_counter ) ) return ( E_mem / E_ideal + 1 - 2 * t_counter ) / ( 2 - 2 * t_counter )","title":"apparent_permselectivity()"},{"location":"core_functions/core_functions/#membrane_toolkit.core.potential.nernst_potential","text":"Calculate the ideal membrane or interface potential according to the Nernst equation. Parameters: Name Type Description Default a0 float Activity (or concentration) of the electrolyte on the left (x=0) side of the membrane. The units of a0 and aL must match. required aL float Activity (or concentration) of the electrolyte on the left (x=0) side of the membrane. The units of a0 and aL must match. required z_ct int signed charge of the counter-ion species. Default = +1 1 temperature float Temperature of the electrolyte [C]. Default = 25 C 25 Returns: Type Description float The potential [V] of the left (x=0) interface with respect to the right (x=L) interface, according to the Nernst equation. Notes The Nernst equation gives the electrical potential across an ideally-selective membrane separating two electrolyte solutions. E = \\frac{RT}{z_{ct} F}\\log{\\frac{a0}{aL}} where R (8.314 J/mol K) is the ideal gas constant and F (96485 C/mol) is the Faraday constant. References Bard, A. J.; Faulkner, L. R. Electrochemical Methods: Fundamentals and Applications, 2nd ed.; John Wiley & Sons, 2001. Helfferich, F. Ion Exchange; McGraw-Hill: New York, 1962. Winger, A.; Bodamer, G.; Kunin, R. Some electrochemical properties of new synthetic ion exchange memebranes. J. Electrochem. Soc 1953, 100 (4), 178\u2013184. Source code in membrane_toolkit/core/potential.py 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 def nernst_potential ( a0 : float , aL : float , z_ct : int = 1 , temperature : float = 25 ) -> float : \"\"\" Calculate the ideal membrane or interface potential according to the Nernst equation. Args: a0 (float): Activity (or concentration) of the electrolyte on the left (x=0) side of the membrane. The units of a0 and aL must match. aL (float): Activity (or concentration) of the electrolyte on the left (x=0) side of the membrane. The units of a0 and aL must match. z_ct (int): signed charge of the counter-ion species. Default = +1 temperature (float): Temperature of the electrolyte [C]. Default = 25 C Returns: The potential [V] of the left (x=0) interface with respect to the right (x=L) interface, according to the Nernst equation. Notes: The Nernst equation gives the electrical potential across an ideally-selective membrane separating two electrolyte solutions. $$ E = \\\\frac{RT}{z_{ct} F}\\\\log{\\\\frac{a0}{aL}} $$ where R (8.314 J/mol K) is the ideal gas constant and F (96485 C/mol) is the Faraday constant. References: Bard, A. J.; Faulkner, L. R. Electrochemical Methods: Fundamentals and Applications, 2nd ed.; John Wiley & Sons, 2001. Helfferich, F. Ion Exchange; McGraw-Hill: New York, 1962. Winger, A.; Bodamer, G.; Kunin, R. Some electrochemical properties of new synthetic ion exchange memebranes. J. Electrochem. Soc 1953, 100 (4), 178\u2013184. \"\"\" if a0 < 0 : raise ValueError ( \"Received invalid activity argument of a0 = {} . Electrolyte\" \"activity must be positive.\" . format ( a0 ) ) if aL < 0 : raise ValueError ( \"Received invalid activity argument of aL = {} . Electrolyte\" \"activity must be positive.\" . format ( aL ) ) if temperature < - 273.15 : raise ValueError ( \"Received invalid temperature argument of {} . Temperature\" \"is below absolute zero!\" . format ( temperature ) ) return 8.314 * ( temperature + 273.15 ) / z_ct / 96485 * np . log ( a0 / aL )","title":"nernst_potential()"},{"location":"core_functions/core_functions/#membrane_toolkit.core.potential.transport_number","text":"Calculate the transport number of an ionic species in the membrane Source code in membrane_toolkit/core/potential.py 53 54 55 56 57 def transport_number (): \"\"\" Calculate the transport number of an ionic species in the membrane \"\"\" pass","title":"transport_number()"}]}